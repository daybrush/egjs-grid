{"version":3,"file":"grid.esm.js","sources":["../src/consts.ts","../src/ContainerManager.ts","../src/utils.ts","../src/ItemRenderer.ts","../src/GridItem.ts","../src/Grid.ts","../src/grids/MasonryGrid.ts","../src/grids/lib/dijkstra.ts","../src/grids/JustifiedGrid.ts","../src/grids/FrameGrid.ts","../src/grids/lib/BoxModel.ts","../src/grids/PackingGrid.ts"],"sourcesContent":["import { GridOptions } from \"./types\";\n\nexport const DEFAULT_GRID_OPTIONS: Required<GridOptions> = {\n  horizontal: false,\n  useTransform: false,\n  percentage: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  gap: 0,\n  attributePrefix: \"data-grid-\",\n  resizeDebounce: 100,\n  maxResizeDebounce: 0,\n  autoResize: true,\n  defaultDirection: \"end\",\n  externalContainerManager: null,\n  externalItemRenderer: null,\n  renderOnPropertyChange: true,\n};\n\nexport enum PROPERTY_TYPE {\n  PROPERTY = 1,\n  RENDER_PROPERTY = 2,\n}\nexport enum MOUNT_STATE {\n  UNCHECKED = 1,\n  UNMOUNTED = 2,\n  MOUNTED = 3,\n}\nexport enum UPDATE_STATE {\n  NEED_UPDATE = 1,\n  WAIT_LOADING = 2,\n  UPDATED = 3,\n}\n\nexport const GRID_PROPERTY_TYPES = {\n  gap: PROPERTY_TYPE.RENDER_PROPERTY,\n  defaultDirection: PROPERTY_TYPE.PROPERTY,\n  renderOnPropertyChange: PROPERTY_TYPE.PROPERTY,\n};\n\nexport const GRID_METHODS = [\n  \"syncElements\",\n  \"updateItems\",\n  \"getItems\",\n  \"setItems\",\n  \"renderItems\",\n  \"getContainerInlineSize\",\n] as const;\n\nexport const GRID_EVENTS = [\n  \"renderComplete\",\n  \"contentError\",\n] as const;\n\nexport const RECT_NAMES = {\n  horizontal: {\n    inlinePos: \"top\",\n    contentPos: \"left\",\n    inlineSize: \"height\",\n    contentSize: \"width\",\n  },\n  vertical: {\n    inlinePos: \"left\",\n    contentPos: \"top\",\n    inlineSize: \"width\",\n    contentSize: \"height\",\n  },\n} as const;\n","import { DestroyOptions } from \".\";\nimport { DEFAULT_GRID_OPTIONS } from \"./consts\";\nimport { DOMRect } from \"./types\";\n\nexport interface ContainerManagerOptions {\n  horizontal?: boolean;\n}\n\nexport interface ContainerManagerStatus {\n  rect: DOMRect;\n}\n\nexport class ContainerManager {\n  protected options: Required<ContainerManagerOptions>;\n  protected rect: DOMRect;\n  protected orgCSSText: string;\n\n  constructor(protected container: HTMLElement, options: ContainerManagerOptions) {\n    this.options = {\n      horizontal: DEFAULT_GRID_OPTIONS.horizontal,\n      ...options,\n    };\n\n    this._init();\n  }\n  public resize() {\n    const container = this.container;\n\n    this.setRect({\n      width: container.offsetWidth,\n      height: container.offsetHeight,\n    });\n  }\n  public getRect() {\n    return this.rect;\n  }\n  public setRect(rect: DOMRect) {\n    this.rect = { ...rect };\n  }\n  public getInlineSize() {\n    return this.rect[this.options.horizontal ? \"height\" : \"width\"];\n  }\n  public getContentSize() {\n    return this.rect[this.options.horizontal ? \"width\" : \"height\"]!;\n  }\n  public getStatus() {\n    return {\n      rect: { ...this.rect },\n    };\n  }\n  public setStatus(status: ContainerManagerStatus) {\n    this.rect = { ...status.rect };\n\n    this.setContentSize(this.getContentSize());\n  }\n  public setContentSize(size: number) {\n    const sizeName = this.options.horizontal ? \"width\" : \"height\";\n    this.rect[sizeName] = size;\n    this.container.style[sizeName] = `${size}px`;\n  }\n  public destroy(options: DestroyOptions = {}) {\n    if (!options.preserveUI) {\n      this.container.style.cssText = this.orgCSSText;\n    }\n  }\n  private _init() {\n    const container = this.container;\n    const style = window.getComputedStyle(container);\n\n    this.orgCSSText = container.style.cssText;\n\n    if (style.position === \"static\") {\n      container.style.position = \"relative\";\n    }\n  }\n}\n","import Grid from \"./Grid\";\nimport { GRID_METHODS, GRID_PROPERTY_TYPES, PROPERTY_TYPE } from \"./consts\";\n\nexport function getKeys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\n\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\nexport function isNumber(val: any): val is number {\n  return typeof val === \"number\";\n}\n\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\n\nexport function getDataAttributes(element: HTMLElement, attributePrefix: string) {\n  const dataAttributes: Record<string, string> = {};\n  const attributes = element.attributes;\n  const length = attributes.length;\n\n  for (let i = 0; i < length; ++i) {\n    const attribute = attributes[i];\n    const { name, value } = attribute;\n    if (name.indexOf(attributePrefix) === -1) {\n      continue;\n    }\n    dataAttributes[camelize(name.replace(attributePrefix, \"\"))] = value;\n  }\n\n  return dataAttributes;\n}\n\n/* Class Decorator */\nexport function GetterSetter(component: {\n  prototype: Grid<any>,\n  propertyTypes: typeof GRID_PROPERTY_TYPES,\n}) {\n  const {\n    prototype,\n    propertyTypes,\n  } = component;\n  for (const name in propertyTypes) {\n    const shouldRender = propertyTypes[name] === PROPERTY_TYPE.RENDER_PROPERTY;\n    const attributes: Record<string, any> = {\n      enumerable: true,\n      configurable: true,\n      get(this: Grid) {\n        return this.options[name];\n      },\n      set(this: Grid, value: any) {\n        const options = this.options;\n        const prevValue = options[name];\n\n        if (prevValue === value) {\n          return;\n        }\n        options[name] = value;\n\n        if (shouldRender && options.renderOnPropertyChange) {\n          this.scheduleRender();\n        }\n      },\n    };\n    Object.defineProperty(prototype, name, attributes);\n  }\n}\n\nexport function withMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n\nexport function range(length: number): number[] {\n  const arr: number[] = [];\n  for (let i = 0; i < length; ++i) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function getRangeCost(value: number, range: number[]) {\n  return Math.max(value - range[1], range[0] - value, 0) + 1;\n}\n\n/**\n * Decorator that makes the method of grid available in the framework.\n * @ko 프레임워크에서 그리드의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Grid\n * @private\n * @example\n * ```js\n * import { withGridMethods } from \"@egjs/grid\";\n *\n * class Grid extends React.Component<Partial<GridProps & GridOptions>> {\n *   &#64;withGridMethods\n *   private grid: NativeGrid;\n * }\n * ```\n */\nexport const withGridMethods = withMethods(GRID_METHODS);\n","import { DEFAULT_GRID_OPTIONS, MOUNT_STATE, RECT_NAMES, UPDATE_STATE } from \"./consts\";\nimport { GridItem } from \"./GridItem\";\nimport { DOMRect } from \"./types\";\nimport { getDataAttributes, getKeys } from \"./utils\";\n\nexport interface ItemRendererOptions {\n  attributePrefix?: string;\n  useTransform?: boolean;\n  horizontal?: boolean;\n  percentage?: Array<\"position\" | \"size\"> | boolean;\n  isEqualSize?: boolean;\n  isConstantSize?: boolean;\n}\nexport interface ItemRendererStatus {\n  initialRect: Required<DOMRect> | null;\n}\n\nexport class ItemRenderer {\n  protected options: Required<ItemRendererOptions>;\n  protected containerRect: DOMRect;\n  protected initialRect: Required<DOMRect> | null = null;\n  protected sizePercetage = false;\n  protected posPercetage = false;\n\n  constructor(options: ItemRendererOptions) {\n    this.options = {\n      attributePrefix: DEFAULT_GRID_OPTIONS.attributePrefix,\n      useTransform: DEFAULT_GRID_OPTIONS.useTransform,\n      horizontal: DEFAULT_GRID_OPTIONS.horizontal,\n      percentage: DEFAULT_GRID_OPTIONS.percentage,\n      isEqualSize: DEFAULT_GRID_OPTIONS.isEqualSize,\n      isConstantSize: DEFAULT_GRID_OPTIONS.isConstantSize,\n      ...options,\n    };\n    this._init();\n  }\n  public resize() {\n    this.initialRect = null;\n  }\n  public renderItems(items: GridItem[]) {\n    items.forEach((item) => {\n      this._renderItem(item);\n    });\n  }\n  public getInlineSize() {\n    return this.containerRect[this.options.horizontal ? \"height\" : \"width\"]!;\n  }\n  public setContainerRect(rect: DOMRect) {\n    this.containerRect = rect;\n  }\n  public updateItems(items: GridItem[]) {\n    items.forEach((item) => {\n      this._updateItem(item);\n    });\n  }\n  public getStatus(): ItemRendererStatus {\n    return {\n      initialRect: this.initialRect,\n    };\n  }\n  public setStatus(status: ItemRendererStatus) {\n    this.initialRect = status.initialRect;\n  }\n  private _init() {\n    const { percentage } = this.options;\n\n    let sizePercentage = false;\n    let posPercentage = false;\n\n    if (percentage === true) {\n      sizePercentage = true;\n      posPercentage = true;\n    } else if (percentage) {\n      if (percentage.indexOf(\"position\") > -1) {\n        posPercentage = true;\n      }\n      if (percentage.indexOf(\"size\") > -1) {\n        sizePercentage = true;\n      }\n    }\n\n    this.posPercetage = posPercentage;\n    this.sizePercetage = sizePercentage;\n  }\n  private _updateItem(item: GridItem) {\n    const { isEqualSize, isConstantSize } = this.options;\n    const initialRect = this.initialRect;\n    const { orgRect, element } = item;\n    const hasOrgRect = orgRect && orgRect.width && orgRect.height;\n    let rect: Required<DOMRect>;\n\n    if (isEqualSize && initialRect) {\n      rect = initialRect;\n    } else if (isConstantSize && hasOrgRect) {\n      rect = orgRect;\n    } else if (!element) {\n      return;\n    } else {\n      rect = {\n        left: element.offsetLeft,\n        top: element.offsetTop,\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n      };\n    }\n    if (!hasOrgRect) {\n      item.orgRect = { ...rect };\n    }\n    item.rect = { ...rect };\n\n    if (item.element) {\n      item.mountState = MOUNT_STATE.MOUNTED;\n    }\n    if (item.updateState === UPDATE_STATE.NEED_UPDATE) {\n      item.updateState = UPDATE_STATE.UPDATED;\n    }\n    item.attributes = element ? getDataAttributes(element, this.options.attributePrefix) : {};\n    this.initialRect = { ...rect };\n\n    return rect;\n  }\n  private _renderItem(item: GridItem) {\n    const element = item.element;\n    const cssRect = item.cssRect;\n\n    if (!element || !cssRect) {\n      return;\n    }\n\n    const {\n      horizontal,\n      useTransform,\n    } = this.options;\n    const posPercentage = this.posPercetage;\n    const sizePercentage = this.sizePercetage;\n    const cssTexts: string[] = [\"position: absolute;\"];\n    const {\n      inlineSize: sizeName,\n      inlinePos: posName,\n    } = RECT_NAMES[horizontal ? \"horizontal\": \"vertical\"];\n    const inlineSize = this.getInlineSize();\n    let keys = getKeys(cssRect);\n\n    if (useTransform) {\n      keys = keys.filter((key) => key !== \"top\" && key !== \"left\");\n\n      cssTexts.push(`transform: `\n        + `translate(${cssRect.left || 0}px, ${cssRect.top || 0}px);`\n      );\n    }\n    cssTexts.push(...keys.map((name) => {\n      const value = cssRect[name]!;\n\n      if (\n        (name === sizeName && sizePercentage) ||\n        (name === posName && posPercentage)\n      ) {\n        return `${name}: ${(value / inlineSize) * 100}%;`;\n      }\n      return `${name}: ${value}px;`;\n    }));\n\n    element.style.cssText += cssTexts.join(\"\");\n  }\n}\n","import { DOMRect, GridRect } from \"./types\";\nimport { MOUNT_STATE, RECT_NAMES, UPDATE_STATE } from \"./consts\";\n\n/**\n * @typedef\n * @memberof Grid.GridItem\n * @property - The item key. <ko>아이템 키.</ko>\n * @property - The element for the item. <ko>아이템에 있는 엘리먼트.</ko>\n * @property - State of whether the element has been added to the container. <ko>element가 container에 추가되었는지 상태.</ko>\n * @property - The update state of the element's rect. <ko>element의 rect의 업데이트 상태.</ko>\n * @property - Attributes set as `data-grid-` of element. <ko>element의 `data-grid-`으로 설정된 속성들.</ko>\n * @property - cssText of the first style when an element is added to the container. <ko>element가 container에 추가됐을 때 처음 style의 cssText.</ko>\n * @property - The element's rect before first rendering. <ko>처음 렌더링 하기 전 엘리먼트의 rect.</ko>\n * @property - The updated element's rect before rendering. <ko>렌더링 하기 전 업데이트 된 엘리먼트의 rect.</ko>\n * @property - The CSS rect of the item to be rendered by being applied to the Grid. <ko>Grid에 적용되어 렌더링을 하기 위한 item의 CSS rect</ko>\n * @property - Additional data of the item. <ko>item의 추가적인 데이터들.</ko>\n */\nexport interface GridItemStatus {\n  key?: string;\n  element?: HTMLElement | null;\n  mountState?: MOUNT_STATE;\n  updateState?: UPDATE_STATE;\n  attributes?: Record<string, string>;\n  orgCSSText?: string;\n  orgRect?: Required<DOMRect>;\n  rect?: Required<DOMRect>;\n  cssRect?: DOMRect;\n  data?: Record<string, string>;\n}\n\n\n/**\n * @memberof Grid\n * @implements Grid.GridItem.GridItemStatus\n */\nclass GridItem {\n  /**\n   * @constructor\n   * @param horizontal - Direction of the scroll movement. (true: horizontal, false: vertical) <ko>스크롤 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param itemStatus - Default status object of GridItem module. <ko>GridItem 모듈의 기본 status 객체.</ko>\n   */\n  constructor(\n    protected horizontal: boolean,\n    itemStatus: Partial<GridItemStatus> = {},\n  ) {\n    const element = itemStatus.element;\n    const status: Required<GridItemStatus> = {\n      key: \"\",\n      orgRect: { left: 0, top: 0, width: 0, height: 0 },\n      rect: { left: 0, top: 0, width: 0, height: 0 },\n      cssRect: {},\n      attributes: {},\n      data: {},\n      mountState: MOUNT_STATE.UNCHECKED,\n      updateState: UPDATE_STATE.NEED_UPDATE,\n      element: element || null,\n      orgCSSText: element?.style.cssText ?? \"\",\n      ...itemStatus,\n    };\n\n    for (const name in status) {\n      this[name] = status[name];\n    }\n  }\n  /**\n   * The size in inline direction before first rendering. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko 첫 렌더링 되기 전의 inline 방향의 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#orgInlineSize\n   */\n  public get orgInlineSize() {\n    const orgRect = this.orgRect;\n\n    return this.horizontal ? orgRect.height : orgRect.width;\n  }\n  /**\n   * The size in content direction before first rendering. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko 첫 렌더링 되기 전의 content 방향의 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#orgContentSize\n   */\n  public get orgContentSize() {\n    const orgRect = this.orgRect;\n\n    return this.horizontal ? orgRect.width : orgRect.height;\n  }\n  /**\n   * The size in inline direction. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko inline 방향의 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#inlineSize\n   */\n  public get inlineSize() {\n    const rect = this.rect;\n\n    return this.horizontal ? rect.height : rect.width;\n  }\n  /**\n   * The size in content direction. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko content 방향의 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#contentSize\n   */\n  public get contentSize() {\n    const rect = this.rect;\n\n    return this.horizontal ? rect.width : rect.height;\n  }\n  /**\n   * The CSS size in inline direction applied to the Grid. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko Grid에 적용된 inline 방향의 CSS 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#cssInlineSize\n   */\n  public get cssInlineSize() {\n    const cssRect = this.cssRect;\n\n    return this.horizontal ? cssRect.height! : cssRect.width!;\n  }\n  /**\n   * The CSS size in content direction applied to the Grid. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko Grid에 적용된 content 방향의 CSS 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#cssContentSize\n   */\n  public get cssContentSize() {\n    const cssRect = this.cssRect;\n\n    return this.horizontal ? cssRect.width! : cssRect.height!;\n  }\n  /**\n   * The CSS pos in inline direction applied to the Grid. \"left\" if horizontal is false, \"top\" otherwise.\n   * @ko Grid에 적용된 inline 방향의 CSS 포지션. horizontal이 false면 \"left\", 아니면 \"top\".\n   * @member Grid.GridItem#cssInlinePos\n   */\n  public get cssInlinePos() {\n    const cssRect = this.cssRect;\n\n    return this.horizontal ? cssRect.top! : cssRect.left!;\n  }\n  /**\n   * The CSS pos in content direction applied to the Grid. \"top\" if horizontal is false, \"left\" otherwise.\n   * @ko Grid에 적용된 content 방향의 CSS 포지션. horizontal이 false면 \"top\", 아니면 \"left\".\n   * @member Grid.GridItem#cssContentPos\n   */\n  public get cssContentPos() {\n    const cssRect = this.cssRect;\n\n    return this.horizontal ? cssRect.left! : cssRect.top!;\n  }\n  public set cssInlinePos(inlinePos: number) {\n    const cssRect = this.cssRect;\n\n    cssRect[this.horizontal ? \"top\" : \"left\"] = inlinePos;\n  }\n  public set cssContentPos(contentPos: number) {\n    const cssRect = this.cssRect;\n\n    cssRect[this.horizontal ? \"left\" : \"top\"] = contentPos;\n  }\n  public set cssInlineSize(inlineSize: number) {\n    const cssRect = this.cssRect;\n\n    cssRect[this.horizontal ? \"height\" : \"width\"] = inlineSize;\n  }\n  public set cssContentSize(contentSize: number) {\n    const cssRect = this.cssRect;\n\n    cssRect[this.horizontal ? \"width\" : \"height\"] = contentSize;\n  }\n  /**\n   * Set CSS Rect through GridRect.\n   * @ko GridRect을 통해 CSS Rect를 설정한다.\n   * @param - The style for setting CSS rect. <ko>CSS rect를 설정하기 위한 스타일.</ko>\n   */\n  public setCSSGridRect(gridRect: GridRect) {\n    const names = RECT_NAMES[this.horizontal ? \"horizontal\" : \"vertical\"];\n\n    const rect: DOMRect = {};\n\n    for (const name in gridRect) {\n      rect[names[name]] = gridRect[name];\n    }\n    this.cssRect = rect;\n  }\n  /**\n   * Returns the status of the item.\n   * @ko 아이템의 상태를 반환한다.\n   */\n  public getStatus(): GridItemStatus {\n    return {\n      mountState: this.mountState,\n      updateState: this.updateState,\n      attributes: this.attributes,\n      orgCSSText: this.orgCSSText,\n      element: null,\n      key: this.key,\n      orgRect: this.orgRect,\n      rect: this.rect,\n      cssRect: this.cssRect,\n      data: this.data,\n    };\n  }\n}\n\ninterface GridItem extends Required<GridItemStatus> {\n}\nexport { GridItem };\n","/* eslint-disable @typescript-eslint/indent */\nimport Component from \"@egjs/component\";\nimport { DEFAULT_GRID_OPTIONS, GRID_PROPERTY_TYPES, MOUNT_STATE, UPDATE_STATE } from \"./consts\";\nimport { ContainerManager } from \"./ContainerManager\";\nimport {\n  DestroyOptions, GridEvents, GridOptions,\n  GridOutlines, GridStatus, Properties, RenderOptions,\n  OnRenderComplete,\n} from \"./types\";\nimport ImReady from \"@egjs/imready\";\nimport { ItemRenderer } from \"./ItemRenderer\";\nimport { GetterSetter, isNumber, isString } from \"./utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport { GridItem } from \"./GridItem\";\n\n/**\n * @extends eg.Component\n */\n@GetterSetter\nabstract class Grid<\n  Options extends GridOptions = GridOptions\n  > extends Component<GridEvents> {\n  public static defaultOptions: Required<GridOptions> = DEFAULT_GRID_OPTIONS;\n  public static propertyTypes = GRID_PROPERTY_TYPES;\n  public options: Required<Options>;\n  protected containerElement: HTMLElement;\n  protected containerManager: ContainerManager;\n  protected itemRenderer!: ItemRenderer;\n  protected items: GridItem[] = [];\n  protected outlines: GridOutlines = {\n    start: [],\n    end: [],\n  };\n  private _renderTimer = 0;\n  private _resizeTimer = 0;\n  private _maxResizeDebounceTimer = 0;\n  private _im: ImReady;\n\n  /**\n  * Apply the CSS rect of items to fit the Grid and calculate the outline.\n  * @ko  Grid에 맞게 아이템들의 CSS rect를 적용하고 outline을 계산한다.\n  * @abstract\n  * @method Grid#applyGrid\n  * @param {\"start\" | \"end\"} direcion - The direction to apply the Grid. (\"end\": start to end, \"start\": end to start) <ko>Grid를 적용할 방향. (\"end\": 시작에서 끝 방향, \"start\": 끝에서 시작 방향)</ko>\n  * @param {number[]} outline - The start outline to apply the Grid. <ko>Grid를 적용할 시작 outline.</ko>\n  */\n  public abstract applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines;\n\n  /**\n   * @param - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n   * @param - The option object of the Grid module <ko>Grid 모듈의 옵션 객체</ko>\n   */\n  constructor(containerElement: HTMLElement | string, options: Partial<Options> = {}) {\n    super();\n\n    this.options = {\n      ...((this.constructor as typeof Grid)\n        .defaultOptions as Required<Options>),\n      ...options,\n    };\n\n    this.containerElement = isString(containerElement)\n      ? document.querySelector<HTMLElement>(containerElement)!\n      : containerElement;\n\n    const {\n      isEqualSize,\n      isConstantSize,\n      useTransform,\n      horizontal,\n      percentage,\n    } = this.options;\n\n    // TODO: 테스트용 설정\n    this.containerManager = new ContainerManager(this.containerElement, {\n      horizontal,\n    });\n    this.itemRenderer = new ItemRenderer({\n      useTransform,\n      isEqualSize,\n      isConstantSize,\n      percentage,\n    });\n\n    this._init();\n  }\n  /**\n   * Return items.\n   * @ko 아이템들을 반환한다.\n   */\n  public getItems(): GridItem[] {\n    return this.items;\n  }\n  /**\n   * Returns the children of the container element.\n   * @ko 컨테이너 엘리먼트의 children을 반환한다.\n   */\n  public getChildren(): HTMLElement[] {\n    return [].slice.call(this.containerElement.children);\n  }\n  /**\n   * Set items.\n   * @ko 아이템들을 설정한다.\n   * @param items - The items to set. <ko>설정할 아이템들</ko>\n   */\n  public setItems(items: GridItem[]): this {\n    this.items = items;\n    return this;\n  }\n  /**\n   * Gets the container's inline size. (\"width\" if horizontal is false, otherwise \"height\")\n   * @ko container의 inline 사이즈를 가져온다. (horizontal이 false면 \"width\", 아니면 \"height\")\n   */\n  public getContainerInlineSize(): number {\n    return this.containerManager.getInlineSize()!;\n  }\n  /**\n   * Returns the outlines of the start and end of the Grid.\n   * @ko Grid의 처음과 끝의 outline을 반환한다.\n   */\n  public getOutlines(): GridOutlines {\n    return this.outlines;\n  }\n  /**\n   * Set outlines.\n   * @ko 아웃라인을 설정한다.\n   * @param items - The outlines to set. <ko>설정할 아웃라인.</ko>\n   */\n  public setOutlines(outlines: GridOutlines) {\n    this.outlines = outlines;\n    return this;\n  }\n  /**\n   * When elements change, it synchronizes and renders items.\n   * @ko elements가 바뀐 경우 동기화를 하고 렌더링을 한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public syncElements(options: RenderOptions = {}) {\n    const items = this.items;\n    const horizontal = this.options.horizontal;\n    const elements: HTMLElement[] = this.getChildren();\n    const { added, maintained, changed, removed } = diff(this.items.map((item) => item.element!), elements);\n\n    const nextItems: GridItem[] = [];\n\n    maintained.forEach(([beforeIndex, afterIndex]) => {\n      nextItems[afterIndex] = items[beforeIndex];\n    });\n    added.forEach((index) => {\n      nextItems[index] = new GridItem(horizontal!, {\n        element: elements[index],\n      });\n    });\n\n    this.setItems(nextItems);\n\n    if (added.length || removed.length || changed.length) {\n      this.renderItems(options);\n    }\n    return this;\n  }\n  /**\n   * Update the size of the items and render them.\n   * @ko 아이템들의 사이즈를 업데이트하고 렌더링을 한다.\n   * @param - Items to be updated. <ko>업데이트할 아이템들.</ko>\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public updateItems(items: GridItem[] = this.items, options: RenderOptions = {}) {\n    items.forEach((item) => {\n      item.updateState = UPDATE_STATE.NEED_UPDATE;\n    });\n    this.checkReady(options);\n    return this;\n  }\n  /**\n   * Rearrange items to fit the grid and render them.\n   * @ko grid에 맞게 아이템을 재배치하고 렌더링을 한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public renderItems(options: RenderOptions = {}) {\n    this._clearRenderTimer();\n\n    if (!this.getItems().length && this.getChildren().length) {\n      this.syncElements(options);\n    } else if (options.useResize) {\n      // Resize container and Update all items\n      this._resizeContainer();\n      this.updateItems(this.items, options);\n    } else {\n      // Update only items that need to be updated.\n      this.checkReady(options);\n    }\n    return this;\n  }\n  /**\n   * Returns current status such as item's position, size. The returned status can be restored with the setStatus() method.\n   * @ko 아이템의 위치, 사이즈 등 현재 상태를 반환한다. 반환한 상태는 setStatus() 메서드로 복원할 수 있다.\n   */\n  public getStatus(): GridStatus {\n    return {\n      outlines: this.outlines,\n      items: this.items.map((item) => item.getStatus()),\n      containerManager: this.containerManager.getStatus(),\n      itemRenderer: this.itemRenderer.getStatus(),\n    };\n  }\n  /**\n   * Set status of the Grid module with the status returned through a call to the getStatus() method.\n   * @ko getStatus() 메서드에 대한 호출을 통해 반환된 상태로 Grid 모듈의 상태를 설정한다.\n   */\n  public setStatus(status: GridStatus) {\n    const horizontal = this.options.horizontal;\n    const containerManager = this.containerManager;\n    const prevInlineSize = containerManager.getInlineSize();\n    const children = this.getChildren();\n\n    this.itemRenderer.setStatus(status.itemRenderer);\n    containerManager.setStatus(status.containerManager);\n    this.outlines = status.outlines;\n    this.items = status.items.map((item, i) => new GridItem(horizontal!, {\n      ...item,\n      element: children[i],\n    }));\n\n    this.itemRenderer.renderItems(this.items);\n\n    if (prevInlineSize !== containerManager.getInlineSize()) {\n      this.renderItems({\n        useResize: true,\n      });\n    } else {\n      window.setTimeout(() => {\n        this._renderComplete({\n          mounted: this.items,\n          updated: [],\n          isResize: false,\n        });\n      });\n    }\n    return this;\n  }\n  /**\n   * Releases the instnace and events and returns the CSS of the container and elements.\n   * @ko 인스턴스와 이벤트를 해제하고 컨테이너와 엘리먼트들의 CSS를 되돌린다.\n   * @param Options for destroy. <ko>destory()를 위한 옵션</ko>\n   */\n  public destroy(options: DestroyOptions = {}) {\n    this.containerManager.destroy(options);\n\n    if (!options.preserveUI) {\n      this.items.forEach(({ element, orgCSSText }) => {\n        if (element) {\n          element.style.cssText = orgCSSText;\n        }\n      });\n    }\n    window.removeEventListener(\"resize\", this._scheduleResize);\n    this._im?.destroy();\n  }\n  protected checkReady(options: RenderOptions = {}) {\n    // Grid: renderItems => checkItems => _renderItems\n    const items = this.items;\n    const updated = items.filter((item) => item.element && item.updateState !== UPDATE_STATE.UPDATED);\n    const mounted: GridItem[] = updated.filter((item) => item.mountState !== MOUNT_STATE.MOUNTED);\n    const moreUpdated: GridItem[] = [];\n\n    this._im?.destroy();\n    this._im = new ImReady({\n      prefix: this.options.attributePrefix,\n    }).on(\"preReadyElement\", (e) => {\n      if (e.hasLoading) {\n        updated[e.index].updateState = UPDATE_STATE.WAIT_LOADING;\n      }\n    }).on(\"preReady\", () => {\n      this.itemRenderer.updateItems(updated);\n      this._renderItems(mounted, updated, options);\n    }).on(\"readyElement\", (e) => {\n      const item = updated[e.index];\n      if (e.hasLoading) {\n        item.updateState = UPDATE_STATE.NEED_UPDATE;\n\n        if (e.isPreReadyOver) {\n          this.itemRenderer.updateItems([item]);\n          this._renderItems([], [item], options);\n        }\n      }\n    }).on(\"error\", (e) => {\n      const item = items[e.index];\n      /**\n       * This event is fired when an error occurs in the content.\n       * @ko 콘텐츠 로드에 에러가 날 때 발생하는 이벤트.\n       * @event Grid#contentError\n       * @param {Grid.OnContentError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n       * @param {HTMLElement} [e.element] - The item's element.<ko>아이템의 엘리먼트.</ko>\n       * @param {HTMLElement} [e.target] - The content element with error.<ko>에러난 발생한 콘텐츠 엘리먼트.</ko>\n       * @param {Grid.GridItem} [e.item] - The item with error content.<ko>에러난 콘텐츠를 가지고 있는 아이템</ko>\n       * @param {function} [e.update] - If you have fixed the error and want to recheck it, call update(). If you remove an element, call the syncElements() method.<ko>에러를 해결했고 재검사하고 싶으면 update()를 호출해라. 만약 엘리먼트를 삭제한 경우 syncElements() 메서드를 호출해라.</ko>\n       * @example\ngrid.on(\"contentError\", e => {\n  e.update();\n});\n      */\n      this.trigger(\"contentError\", {\n        element: e.element,\n        target: e.target,\n        item,\n        update: () => {\n          moreUpdated.push(item);\n        },\n      });\n    }).on(\"ready\", () => {\n      if (moreUpdated.length) {\n        this.updateItems(moreUpdated);\n      }\n    }).check(updated.map((item) => item.element!));\n  }\n\n  protected scheduleRender() {\n    this._clearRenderTimer();\n    this._renderTimer = window.setTimeout(() => {\n      this.renderItems();\n    });\n  }\n  private _fit() {\n    const outlines = this.outlines;\n    const startOutline = outlines.start;\n    const endOutline = outlines.end;\n    const outlineOffset = startOutline.length ? Math.min(...startOutline) : 0;\n\n    outlines.start = startOutline.map((point) => point - outlineOffset);\n    outlines.end = endOutline.map((point) => point - outlineOffset);\n\n    this.items.forEach((item) => {\n      const contentPos = item.cssContentPos;\n\n      if (!isNumber(contentPos)) {\n        return;\n      }\n      item.cssContentPos = contentPos - outlineOffset;\n    });\n  }\n  private _renderItems(mounted: GridItem[], updated: GridItem[], options: RenderOptions) {\n    const prevOutlines = this.outlines;\n    const direction = options.direction || this.options.defaultDirection!;\n    const prevOutline = options.outline || prevOutlines[direction === \"end\" ? \"start\" : \"end\"];\n    const items = this.items;\n    let nextOutlines = {\n      start: [...prevOutline],\n      end: [...prevOutline],\n    };\n    if (items.length) {\n      nextOutlines = this.applyGrid(this.items, direction, prevOutline);\n    }\n    this.setOutlines(nextOutlines);\n    this._fit();\n    this.itemRenderer.renderItems(this.items);\n    this._refreshContainerContentSize();\n    this._renderComplete({\n      mounted,\n      updated,\n      isResize: !!options.useResize,\n    });\n  }\n  private _renderComplete(e: OnRenderComplete) {\n    /**\n     * This event is fired when the Grid has completed rendering.\n     * @ko Grid가 렌더링이 완료됐을 때  발생하는 이벤트이다.\n     * @event Grid#renderComplete\n     * @param {Grid.OnRenderComplete} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @param {function} [e.mounted] - The items rendered for the first time <ko>처음 렌더링한 아이템들</ko>\n     * @param {function} [e.updated] - The items updated in size.<ko>사이즈 업데이트한 아이템들.</ko>\n     * @param {function} [e.useResize] - Whether rendering was done using the resize event or the useResize option. <ko>resize 이벤트 또는 useResize 옵션을 사용하여 렌더링를 했는지 여부.</ko>\n     * @example\ngrid.on(\"renderComplete\", e => {\nconsole.log(e.mounted, e.updated, e.useResize);\n});\n      */\n    this.trigger(\"renderComplete\", e);\n  }\n  private _clearRenderTimer() {\n    clearTimeout(this._renderTimer);\n    this._renderTimer = 0;\n  }\n  private _refreshContainerContentSize() {\n    const {\n      start: startOutline,\n      end: endOutline,\n    }  = this.outlines;\n    const gap = this.options.gap!;\n\n    const endPoint = endOutline.length ? Math.max(...endOutline): 0;\n    const startPoint = startOutline.length ? Math.max(...startOutline) : 0;\n    const contentSize = Math.max(startPoint, endPoint - gap);\n\n    this.containerManager.setContentSize(contentSize);\n  }\n  private _resizeContainer() {\n    this.containerManager.resize();\n    this.itemRenderer.setContainerRect(this.containerManager.getRect());\n  }\n  private _onResize = () => {\n    clearTimeout(this._resizeTimer);\n    clearTimeout(this._maxResizeDebounceTimer);\n\n    this._maxResizeDebounceTimer = 0;\n    this._resizeTimer = 0;\n    this.renderItems({\n      useResize: true,\n    });\n  }\n  private _scheduleResize = () => {\n    const {\n      resizeDebounce,\n      maxResizeDebounce,\n    } = this.options;\n\n\n    if (!this._maxResizeDebounceTimer && maxResizeDebounce >= resizeDebounce) {\n      this._maxResizeDebounceTimer = window.setTimeout(this._onResize, maxResizeDebounce);\n    }\n    if (this._resizeTimer) {\n      clearTimeout(this._resizeTimer);\n      this._resizeTimer = 0;\n    }\n    this._resizeTimer = window.setTimeout(this._onResize, resizeDebounce);\n  }\n\n  private _init() {\n    this._resizeContainer();\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this._scheduleResize);\n    }\n  }\n}\n\ninterface Grid extends Properties<typeof Grid> { }\n\nexport default Grid;\n\n/**\n * Gap used to create space around items.\n * @ko 아이템들 사이의 공간.\n * @name Grid#gap\n * @type {$ts:Grid.GridOptions[\"gap\"]}\n * @example\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   gap: 0,\n * });\n *\n * grid.gap = 5;\n */\n\n/**\n * The default direction value when direction is not set in the render option.\n * @ko render옵션에서 direction을 미설정시의 기본 방향값.\n * @name Grid#defaultDirection\n * @type {$ts:Grid.GridOptions[\"defaultDirection\"]}\n * @example\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   defaultDirection: \"end\",\n * });\n *\n * grid.defaultDirection = \"start\";\n */\n","import Grid from \"../Grid\";\nimport { PROPERTY_TYPE, UPDATE_STATE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines, GridAlign } from \"../types\";\nimport { range, GetterSetter } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\n\n\n/**\n * @typedef\n * @memberof Grid.MasonryGrid\n * @extends Grid.GridOptions\n * @property - The number of columns. If the number of columns is 0, it is automatically calculated according to the size of the container. <ko>열의 개수. 열의 개수가 0이라면, 컨테이너의 사이즈에 의해 계산이 된다. (default: 0) </ko>\n * @property - The size of the columns. If it is 0, it is calculated as the size of the first item in items. (default: 0) <ko> 열의 사이즈. 만약 열의 사이즈가 0이면, 아이템들의 첫번째 아이템의 사이즈로 계산이 된다. (default: 0) </ko>\n * @property - The size ratio(inlineSize / contentSize) of the columns. 0 is not set. (default: 0) <ko>열의 사이즈 비율(inlineSize / contentSize). 0은 미설정이다. </ko>\n * @property - Align of the position of the items. If you want to use `stretch`, be sure to set `column` or `columnSize` option. (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\") <ko>아이템들의 위치의 정렬. `stretch`를 사용하고 싶다면 `column` 또는 `columnSize` 옵션을 설정해라.  (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\")</ko>\n */\nexport interface MasonryGridOptions extends GridOptions {\n  column?: number;\n  columnSize?: number;\n  columnSizeRatio?: number;\n  align?: GridAlign;\n}\n\n/**\n * The MasonryGrid is a layout that stacks cards with the same width as a stack of bricks. Adjust the width of all images to the same size, find the lowest height column, and insert a new card.\n *\n * @ko MasonryGrid는 벽돌을 쌓아 올린 모양처럼 동일한 너비를 가진 카드를 쌓는 레이아웃이다. 모든 이미지의 너비를 동일한 크기로 조정하고, 가장 높이가 낮은 열을 찾아 새로운 이미지를 삽입한다. 따라서 배치된 카드 사이에 빈 공간이 생기지는 않지만 배치된 레이아웃의 아래쪽은 울퉁불퉁해진다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.MasonryGrid.MasonryGridOptions} options - The option object of the MasonryGrid module <ko>MasonryGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class MasonryGrid extends Grid<MasonryGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    column: PROPERTY_TYPE.RENDER_PROPERTY,\n    columnSize: PROPERTY_TYPE.RENDER_PROPERTY,\n    columnSizeRatio: PROPERTY_TYPE.RENDER_PROPERTY,\n    align: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<MasonryGridOptions> = {\n    ...Grid.defaultOptions,\n    align: \"justify\",\n    column: 0,\n    columnSize: 0,\n    columnSizeRatio: 0,\n  };\n\n  private _columnSize = 0;\n  private _column = 1;\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    this._calculateColumnSize(items);\n    this._calculateColumn(items);\n\n    const column = this._column;\n    const columnSize = this._columnSize;\n    const {\n      gap,\n      align,\n      columnSizeRatio,\n    } = this.options;\n    const outlineLength = outline.length;\n    const itemsLength = items.length;\n    const alignPoses = this._getAlignPoses();\n    const isEndDirection = direction === \"end\";\n    const pointCalculateName = isEndDirection ? \"min\" : \"max\";\n    const indexCalculateName = isEndDirection ? \"indexOf\" : \"lastIndexOf\";\n    let startOutline = [0];\n\n    if (outlineLength === column) {\n      startOutline = outline.slice();\n    } else {\n      const point = outlineLength ? Math[pointCalculateName](...outline) : 0;\n\n      startOutline = range(column).map(() => point);\n    }\n    const endOutline = startOutline.slice();\n    const columnDist = column > 1 ? alignPoses[1] - alignPoses[0] : 0;\n    const isStretch = align === \"stretch\";\n\n    for (let i = 0; i < itemsLength; ++i) {\n      const point = Math[pointCalculateName](...endOutline) || 0;\n      let columnIndex = endOutline[indexCalculateName](point);\n      const item = items[isEndDirection ? i : itemsLength - 1 - i];\n      const columnAttribute = parseInt(item.attributes.column || \"1\", 10);\n      let inlineSize = item.inlineSize;\n      let contentSize = item.contentSize;\n      const maxColumn = Math.min(column, parseInt(item.attributes.maxColumn || \"1\", 10));\n      let itemColumn = Math.min(column, columnAttribute || Math.max(1, Math.ceil((inlineSize + gap) / columnDist)));\n\n      if (columnIndex === -1) {\n        columnIndex = 0;\n      }\n      if (column > 1 && itemColumn > 1) {\n        if (isEndDirection) {\n          // 0   columnIndex(+itemColumn)  column\n          columnIndex = Math.min(columnIndex, Math.max(0, column - itemColumn));\n        } else {\n          // 0   columnIndex(-itemColumn)  column\n          columnIndex = Math.max(columnIndex, Math.min(column - 1, itemColumn));\n        }\n      }\n      if (columnAttribute > 0) {\n        const endColumnIndex = columnIndex + (isEndDirection ? itemColumn : -itemColumn);\n        const columnOutline = outline.slice(\n          Math.min(columnIndex, endColumnIndex), Math.max(columnIndex, endColumnIndex));\n        const columnPoint = isEndDirection ? Math.max(...columnOutline) : Math.min(...columnOutline);\n\n        while (itemColumn < maxColumn) {\n          const nextEndColumnIndex = columnIndex + (isEndDirection ? itemColumn + 1 : -itemColumn - 1);\n\n          if (nextEndColumnIndex < 0 || nextEndColumnIndex > column) {\n            break;\n          }\n          if (\n            (isEndDirection && outline[nextEndColumnIndex - 1] > columnPoint)\n            || (!isEndDirection && outline[nextEndColumnIndex] < columnPoint)\n          ) {\n            break;\n          }\n          ++itemColumn;\n        }\n        if (itemColumn > 1 || isStretch) {\n          inlineSize = (itemColumn - 1) * columnDist + columnSize;\n          item.cssInlineSize = inlineSize;\n        }\n        if (columnSizeRatio > 0) {\n          contentSize = inlineSize / columnSizeRatio;\n          item.cssContentSize = contentSize;\n        }\n      }\n      const inlinePos = alignPoses[columnIndex];\n      const contentPos = isEndDirection ? point : point - gap - contentSize;\n      const endContentPos = contentPos + contentSize + gap;\n\n      item.cssInlinePos = inlinePos;\n      item.cssContentPos = contentPos;\n      const endPoint = isEndDirection ? endContentPos : contentPos;\n\n      range(itemColumn).forEach((indexOffset) => {\n        endOutline[columnIndex + (isEndDirection ? indexOffset : -indexOffset)] = endPoint;\n      });\n    }\n\n    // if end items, startOutline is low, endOutline is high\n    // if start items, startOutline is high, endOutline is low\n    return {\n      start: isEndDirection ? startOutline : endOutline,\n      end: isEndDirection ? endOutline : startOutline,\n    };\n  }\n  private _calculateColumnSize(items: GridItem[]) {\n    const {\n      columnSize: columnSizeOption,\n      gap,\n      align,\n    } = this.options;\n\n    if (align === \"stretch\") {\n      let column = this.column;\n\n      if (columnSizeOption) {\n        column = Math.max(1, Math.floor((this.getContainerInlineSize() + gap) / (columnSizeOption + gap)));\n      }\n      this._columnSize = (this.getContainerInlineSize() + gap) / (column || 1) - gap;\n    } else if (columnSizeOption) {\n      this._columnSize = columnSizeOption;\n    } else {\n      for (const item of items) {\n        const attributes = item.attributes;\n        if (item.updateState !== UPDATE_STATE.UPDATED || !item.rect || attributes.column || attributes.maxColumn) {\n          continue;\n        }\n        const inlineSize = item.inlineSize;\n\n        this._columnSize = inlineSize;\n        return inlineSize;\n      }\n      this._columnSize = this._columnSize || 0;\n    }\n    return this._columnSize;\n  }\n  private _calculateColumn(items: GridItem[]) {\n    const {\n      gap,\n      column: columnOption,\n    } = this.options;\n    const columnSize = this._columnSize;\n    let column = 1;\n\n    if (columnOption) {\n      column = columnOption;\n    } else if (!columnSize) {\n      column = 1;\n    } else {\n      column = Math.min(\n        items.length,\n        Math.max(1, Math.floor((this.getContainerInlineSize() + gap) / (columnSize + gap))),\n      );\n    }\n    this._column = column;\n    return column;\n  }\n  private _getAlignPoses() {\n    const columnSize = this._columnSize;\n    const column = this._column;\n    const {\n      align,\n      gap,\n    } = this.options;\n    const containerSize = this.getContainerInlineSize();\n    const indexes = range(column);\n\n    let offset = 0;\n    let dist = 0;\n\n    if (align === \"justify\" || align === \"stretch\") {\n      const countDist = column - 1;\n\n      dist = countDist ? Math.max((containerSize - columnSize) / countDist, columnSize + gap) : 0;\n      offset = Math.min(0, containerSize / 2 - (countDist * dist + columnSize) / 2);\n    } else {\n      dist = columnSize + gap;\n      const totalColumnSize = (column - 1) * dist + columnSize;\n\n      if (align === \"center\") {\n        offset = (containerSize - totalColumnSize) / 2;\n      } else if (align === \"end\") {\n        offset = containerSize - totalColumnSize;\n      }\n    }\n    return indexes.map((i) => {\n      return offset + i * dist;\n    });\n  }\n}\n\nexport interface MasonryGrid extends Properties<typeof MasonryGrid> {\n}\n\n\n/**\n * Align of the position of the items. If you want to use `stretch`, be sure to set `column` or `columnSize` option. (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\")\n * @ko 아이템들의 위치의 정렬. `stretch`를 사용하고 싶다면 `column` 또는 `columnSize` 옵션을 설정해라.  (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\")\n * @name Grid.MasonryGrid#align\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"align\"]}\n * @example\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   align: \"start\",\n * });\n *\n * grid.align = \"justify\";\n */\n\n\n/**\n * The number of columns. If the number of columns is 0, it is automatically calculated according to the size of the container.\n * @ko 열의 개수. 열의 개수가 0이라면, 컨테이너의 사이즈에 의해 계산이 된다. (default: 0)\n * @name Grid.MasonryGrid#column\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"column\"]}\n * @example\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   column: 0,\n * });\n *\n * grid.column = 4;\n */\n\n\n/**\n * The size of the columns. If it is 0, it is calculated as the size of the first item in items. (default: 0)\n * @ko 열의 사이즈. 만약 열의 사이즈가 0이면, 아이템들의 첫번째 아이템의 사이즈로 계산이 된다. (default: 0)\n * @name Grid.MasonryGrid#columnSize\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"columnSize\"]}\n * @example\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   columnSize: 0,\n * });\n *\n * grid.columnSize = 200;\n */\n\n\n/**\n * The size ratio(inlineSize / contentSize) of the columns. 0 is not set. (default: 0)\n * @ko 열의 사이즈 비율(inlineSize / contentSize). 0은 미설정이다.\n * @name Grid.MasonryGrid#columnSizeRatio\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"columnSizeRatio\"]}\n * @example\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   columnSizeRatio: 0,\n * });\n *\n * grid.columnSizeRatio = 0.5;\n */\n","/* eslint-disable */\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nfunction single_source_shortest_paths(\n\tgraph: (x: string) => ({ [key: string]: number }),\n\ts: string,\n\td: string,\n) {\n\t// Predecessor map for each node that has been encountered.\n\t// node ID => predecessor node ID\n\tconst predecessors: { [key: string]: string } = {};\n\t// Costs of shortest paths from s to all nodes encountered.\n\t// node ID => cost\n\tconst costs: { [key: string]: number } = {};\n\tcosts[s] = 0;\n\n\t// Costs of shortest paths from s to all nodes encountered; differs from\n\t// `costs` in that it provides easy access to the node that currently has\n\t// the known shortest path from s.\n\t// XXX: Do we actually need both `costs` and `open`?\n\tconst open = new BinaryHeap<{ value: string, cost: number }>(x => x.cost);\n\topen.push({ value: s, cost: 0 });\n\n\tlet closest;\n\tlet u;\n\tlet cost_of_s_to_u;\n\tlet adjacent_nodes;\n\tlet cost_of_e;\n\tlet cost_of_s_to_u_plus_cost_of_e;\n\tlet cost_of_s_to_v;\n\tlet first_visit: boolean;\n\n\twhile (open.size()) {\n\t\t// In the nodes remaining in graph that have a known cost from s,\n\t\t// find the node, u, that currently has the shortest path from s.\n\t\tclosest = open.pop();\n\t\tu = closest.value;\n\t\tcost_of_s_to_u = closest.cost;\n\n\t\t// Get nodes adjacent to u...\n\t\tadjacent_nodes = graph(u) || {};\n\n\t\t// ...and explore the edges that connect u to those nodes, updating\n\t\t// the cost of the shortest paths to any or all of those nodes as\n\t\t// necessary. v is the node across the current edge from u.\n\t\tfor (const v in adjacent_nodes) {\n\t\t\t// Get the cost of the edge running from u to v.\n\t\t\tcost_of_e = adjacent_nodes[v];\n\n\t\t\t// Cost of s to u plus the cost of u to v across e--this is *a*\n\t\t\t// cost from s to v that may or may not be less than the current\n\t\t\t// known cost to v.\n\t\t\tcost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n\t\t\t// If we haven't visited v yet OR if the current known cost from s to\n\t\t\t// v is greater than the new cost we just found (cost of s to u plus\n\t\t\t// cost of u to v across e), update v's cost in the cost list and\n\t\t\t// update v's predecessor in the predecessor list (it's now u).\n\t\t\tcost_of_s_to_v = costs[v];\n\t\t\tfirst_visit = (typeof costs[v] === \"undefined\");\n\t\t\tif (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n\t\t\t\tcosts[v] = cost_of_s_to_u_plus_cost_of_e;\n\t\t\t\topen.push({ value: v, cost: cost_of_s_to_u_plus_cost_of_e });\n\t\t\t\tpredecessors[v] = u;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof costs[d] === \"undefined\") {\n\t\tconst msg = [\"Could not find a path from \", s, \" to \", d, \".\"].join(\"\");\n\t\tthrow new Error(msg);\n\t}\n\n\treturn predecessors;\n}\nfunction extract_shortest_path_from_predecessor_list(\n\tpredecessors: { [key: string]: string },\n\td: string,\n) {\n\tconst nodes: string[] = [];\n\tlet u = d;\n\n\twhile (u) {\n\t\tnodes.push(u);\n\t\tu = predecessors[u];\n\t}\n\tnodes.reverse();\n\treturn nodes;\n}\nfunction find_path(\n\tgraph: (x: string) => ({ [key: string]: number }),\n\ts: string,\n\td: string,\n) {\n\tconst predecessors = single_source_shortest_paths(graph, s, d);\n\n\treturn extract_shortest_path_from_predecessor_list(predecessors, d);\n}\n\nclass BinaryHeap<T> {\n\tprivate content: T[];\n\tprivate scoreFunction: (x: T) => number;\n\n\tconstructor(scoreFunction: (x: T) => number) {\n\t\tthis.content = [];\n\t\tthis.scoreFunction = scoreFunction;\n\t}\n\tpublic push(element: T) {\n\t\t// Add the new element to the end of the array.\n\t\tthis.content.push(element);\n\t\t// Allow it to bubble up.\n\t\tthis.bubbleUp(this.content.length - 1);\n\t}\n\tpublic pop() {\n\t\t// Store the first element so we can return it later.\n\t\tconst result = this.content[0];\n\t\t// Get the element at the end of the array.\n\t\tconst end = this.content.pop()!;\n\t\t// If there are any elements left, put the end element at the\n\t\t// start, and let it sink down.\n\t\tif (this.content.length > 0) {\n\t\t\tthis.content[0] = end;\n\t\t\tthis.sinkDown(0);\n\t\t}\n\t\treturn result;\n\t}\n\tpublic size() {\n\t\treturn this.content.length;\n\t}\n\tpublic bubbleUp(_n: number) {\n\t\tlet n = _n;\n\t\t// Fetch the element that has to be moved.\n\t\tconst element = this.content[n];\n\t\t// When at 0, an element can not go up any further.\n\t\twhile (n > 0) {\n\t\t\t// Compute the parent element's index, and fetch it.\n\t\t\tconst parentN = Math.floor((n + 1) / 2) - 1;\n\t\t\tconst parent = this.content[parentN];\n\n\t\t\t// Swap the elements if the parent is greater.\n\t\t\tif (this.scoreFunction(element) < this.scoreFunction(parent)) {\n\t\t\t\tthis.content[parentN] = element;\n\t\t\t\tthis.content[n] = parent;\n\t\t\t\t// Update 'n' to continue at the new position.\n\t\t\t\tn = parentN;\n\t\t\t} else {\n\t\t\t\t// Found a parent that is less, no need to move it further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tpublic sinkDown(n: number) {\n\t\t// Look up the target element and its score.\n\t\tconst length = this.content.length;\n\t\tconst element = this.content[n];\n\t\tconst elemScore = this.scoreFunction(element);\n\t\tlet child1Score;\n\n\t\twhile (true) {\n\t\t\t// Compute the indices of the child elements.\n\t\t\tconst child2N = (n + 1) * 2;\n\t\t\tconst child1N = child2N - 1;\n\t\t\t// This is used to store the new position of the element,\n\t\t\t// if any.\n\t\t\tlet swap: number | null = null;\n\t\t\t// If the first child exists (is inside the array)...\n\t\t\tif (child1N < length) {\n\t\t\t\t// Look it up and compute its score.\n\t\t\t\tconst child1 = this.content[child1N];\n\t\t\t\tchild1Score = this.scoreFunction(child1);\n\t\t\t\t// If the score is less than our element's, we need to swap.\n\t\t\t\tif (child1Score < elemScore) {\n\t\t\t\t\tswap = child1N;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Do the same checks for the other child.\n\t\t\tif (child2N < length) {\n\t\t\t\tconst child2 = this.content[child2N];\n\t\t\t\tconst child2Score = this.scoreFunction(child2);\n\n\t\t\t\tif (child2Score < (swap == null ? elemScore : child1Score)) {\n\t\t\t\t\tswap = child2N;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the element needs to be moved, swap it, and continue.\n\t\t\tif (swap !== null) {\n\t\t\t\tthis.content[n] = this.content[swap];\n\t\t\t\tthis.content[swap] = element;\n\t\t\t\tn = swap;\n\t\t\t} else {\n\t\t\t\t// Otherwise, we are done.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport { find_path };\n","import Grid from \"../Grid\";\nimport { PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines } from \"../types\";\nimport { getRangeCost, GetterSetter, isObject } from \"../utils\";\nimport { find_path } from \"./lib/dijkstra\";\nimport { GridItem } from \"../GridItem\";\n\n\ninterface Link {\n  path: number[];\n  cost: number;\n  length: number;\n  currentNode: number;\n  isOver?: boolean;\n}\n\n/**\n * @typedef\n * @memberof Grid.JustifiedGrid\n * @extends Grid.GridOptions\n * @property - The minimum and maximum number of items per line. (default: [1, 8]) <ko> 한 줄에 들어가는 아이템의 최소, 최대 개수. (default: [1, 8]) </ko>\n * @property - The minimum and maximum number of rows in a group, 0 is not set. (default: 0) <ko> 한 그룹에 들어가는 행의 최소, 최대 개수, 0은 미설정이다. (default: 0) </ko>\n * @property - The minimum and maximum size by which the item is adjusted. If it is not calculated, it may deviate from the minimum and maximum sizes. (default: [0, Infinity]) <ko>아이템이 조정되는 최소, 최대 사이즈. 계산이 되지 않는 경우 최소, 최대 사이즈를 벗어날 수 있다. (default: [0, Infinity])</ko>\n */\nexport interface JustifiedGridOptions extends GridOptions {\n  columnRange?: number | number[];\n  rowRange?: number | number[];\n  sizeRange?: number[];\n}\n\n/**\n * 'justified' is a printing term with the meaning that 'it fits in one row wide'. JustifiedGrid is a grid that the card is filled up on the basis of a line given a size.\n * @ko 'justified'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. JustifiedGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 카드가 가득 차도록 배치하는 Grid다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.JustifiedGrid.JustifiedGridOptions} options - The option object of the JustifiedGrid module <ko>JustifiedGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class JustifiedGrid extends Grid<JustifiedGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    columnRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    rowRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    sizeRange: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<JustifiedGridOptions> = {\n    ...Grid.defaultOptions,\n    columnRange: [1, 8],\n    rowRange: 0,\n    sizeRange: [0, Infinity],\n  };\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const rowRange = this.options.rowRange;\n    let path: string[] = [];\n\n    if (items.length) {\n      path = rowRange ? this._getRowPath(items) : this._getPath(items);\n    }\n    return this._setStyle(items, path, outline, direction === \"end\");\n  }\n  private _getRowPath(items: GridItem[]) {\n    const {\n      columnRange: columnRangeOption,\n      rowRange: rowRangeOption,\n    } = this.options;\n    const columnRange = isObject(columnRangeOption) ? columnRangeOption : [columnRangeOption, columnRangeOption];\n    const rowRange: number[] = isObject(rowRangeOption) ? rowRangeOption : [rowRangeOption, rowRangeOption];\n    const pathLink = this._getRowLink(items, {\n      path: [0],\n      cost: 0,\n      length: 0,\n      currentNode: 0,\n    }, columnRange, rowRange);\n\n    return pathLink?.path.map((node) => `${node}`) ?? [];\n  }\n  private _getRowLink(\n    items: GridItem[],\n    currentLink: Link,\n    columnRange: number[],\n    rowRange: number[]\n  ): Link {\n    const [minColumn] = columnRange;\n    const [minRow, maxRow] = rowRange;\n    const lastNode = items.length;\n    const {\n      path,\n      length: pathLength,\n      cost,\n      currentNode,\n    } = currentLink;\n\n    // not reached lastNode but path is exceed or the number of remaining nodes is less than minColumn.\n    if (currentNode < lastNode && (maxRow <= pathLength || currentNode + minColumn > lastNode)) {\n      const rangeCost = getRangeCost(lastNode - currentNode, columnRange);\n      const lastCost = rangeCost * Math.abs(this._getCost(items, currentNode, lastNode));\n\n      return {\n        ...currentLink,\n        length: pathLength + 1,\n        path: [...path, lastNode],\n        currentNode: lastNode,\n        cost: cost + lastCost,\n        isOver: true,\n      };\n    } else if (currentNode >= lastNode) {\n      return {\n        ...currentLink,\n        currentNode: lastNode,\n        isOver: minRow > pathLength || maxRow < pathLength,\n      };\n    } else {\n      return this._searchRowLink(items, currentLink, lastNode, columnRange, rowRange);\n    }\n\n  }\n  private _searchRowLink(\n    items: GridItem[],\n    currentLink: Link,\n    lastNode: number,\n    columnRange: number[],\n    rowRange: number[]\n  ) {\n    const [minColumn, maxColumn] = columnRange;\n    const {\n      currentNode,\n      path,\n      length: pathLength,\n      cost,\n    } = currentLink;\n    const length = Math.min(lastNode, currentNode + maxColumn);\n    const links: Link[] = [];\n\n    for (let nextNode = currentNode + minColumn; nextNode <= length; ++nextNode) {\n      if (nextNode === currentNode) {\n        continue;\n      }\n      const nextCost = Math.abs(this._getCost(items, currentNode, nextNode));\n      const nextLink = this._getRowLink(items, {\n        path: [...path, nextNode],\n        length: pathLength + 1,\n        cost: cost + nextCost,\n        currentNode: nextNode,\n      }, columnRange, rowRange);\n\n      if (nextLink) {\n        links.push(nextLink);\n      }\n    }\n    links.sort((a, b) => {\n      const aIsOver = a.isOver;\n      const bIsOver = b.isOver;\n\n      if (aIsOver !== bIsOver) {\n        // If it is over, the cost is high.\n        return aIsOver ? 1 : -1;\n      }\n      const aRangeCost = getRangeCost(a.length, rowRange);\n      const bRangeCost = getRangeCost(b.length, rowRange);\n\n      return aRangeCost - bRangeCost || a.cost - b.cost;\n    });\n\n    // It returns the lowest cost link.\n    return links[0];\n  }\n  private _getSize(items: GridItem[]) {\n    const {\n      gap,\n    } = this.options;\n    const size = items.reduce((sum, item) => {\n      const inlineSize = item.orgInlineSize;\n      const contentSize = item.orgContentSize;\n\n      if (!inlineSize || !contentSize) {\n        return sum;\n      }\n      return sum + inlineSize / contentSize;\n    }, 0);\n\n    return size ? (this.getContainerInlineSize()! - gap * (items.length - 1)) / size : 0;\n  }\n  private _getCost(\n    items: GridItem[],\n    i: number,\n    j: number,\n  ) {\n    const size = this._getSize(items.slice(i, j));\n    const [minSize, maxSize] = this.options.sizeRange;\n\n    if (isFinite(maxSize)) {\n      // if this size is not in range, the cost increases sharply.\n      if (size < minSize) {\n        return Math.pow(size - minSize, 2) + Math.pow(maxSize, 2);\n      } else if (size > maxSize) {\n        return Math.pow(size - maxSize, 2) + Math.pow(maxSize, 2);\n      }\n    } else if (size < minSize) {\n      return Math.max(Math.pow(minSize, 2), Math.pow(size, 2)) + Math.pow(maxSize, 2);\n    }\n    // if this size in range, the cost is row\n    return size - minSize;\n  }\n  private _getPath(items: GridItem[]) {\n    const lastNode = items.length;\n    const columnRangeOption = this.options.columnRange;\n    const [minColumn, maxColumn]: number[] = isObject(columnRangeOption)\n      ? columnRangeOption\n      : [columnRangeOption, columnRangeOption];\n\n    const graph = (nodeKey: string) => {\n      const results: { [key: string]: number } = {};\n      const currentNode = parseInt(nodeKey, 10);\n\n      for (let nextNode = Math.min(currentNode + minColumn, lastNode); nextNode <= lastNode; ++nextNode) {\n        if (nextNode - currentNode > maxColumn) {\n          break;\n        }\n        let cost = this._getCost(\n          items,\n          currentNode,\n          nextNode,\n        );\n\n        if (cost < 0 && nextNode === lastNode) {\n          cost = 0;\n        }\n        results[`${nextNode}`] = Math.pow(cost, 2);\n      }\n      return results;\n    };\n    // shortest path for items' total height.\n    return find_path(graph, \"0\", `${lastNode}`);\n  }\n  private _setStyle(\n    items: GridItem[],\n    path: string[],\n    outline: number[] = [],\n    isEndDirection: boolean,\n  ) {\n    const {\n      gap,\n    } = this.options;\n    const length = path.length;\n    const startPoint = outline[0] || 0;\n    let contentPos = startPoint;\n\n    for (let i = 0; i < length - 1; ++i) {\n      const path1 = parseInt(path[i], 10);\n      const path2 = parseInt(path[i + 1], 10);\n      // pathItems(path1 to path2) are in 1 line.\n      const pathItems = items.slice(path1, path2);\n      const pathItemsLength = pathItems.length;\n      const contentSize = this._getSize(pathItems);\n\n      for (let j = 0; j < pathItemsLength; ++j) {\n        const item = pathItems[j];\n        const inlineSize = item.orgInlineSize / item.orgContentSize * contentSize;\n        const prevItem = pathItems[j - 1];\n        const inlinePos = prevItem\n          ? prevItem.cssInlinePos + prevItem.cssInlineSize + gap\n          : 0;\n\n\n        item.setCSSGridRect({\n          inlinePos,\n          contentPos,\n          inlineSize,\n          contentSize,\n        });\n      }\n      contentPos += gap + contentSize;\n    }\n\n    if (isEndDirection) {\n      // previous group's end outline is current group's start outline\n      return {\n        start: [startPoint],\n        end: [contentPos],\n      };\n    }\n    // always start is lower than end.\n    // contentPos is endPoinnt\n    const height = contentPos - startPoint;\n\n    items.forEach((item) => {\n      item.cssContentPos -= height;\n    });\n    return {\n      start: [startPoint - height],\n      end: [startPoint], // endPoint - height = startPoint\n    };\n  }\n}\n\nexport interface JustifiedGrid extends Properties<typeof JustifiedGrid> {\n}\n\n\n/**\n * The minimum and maximum number of items per line. (default: [1, 8])\n * @ko 한 줄에 들어가는 아이템의 최소, 최대 개수. (default: [1, 8])\n * @name Grid.JustifiedGrid#columnRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"columnRange\"]}\n * @example\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   columnRange: [1, 8],\n * });\n *\n * grid.columnRange = [3, 6];\n */\n\n\n/**\n * The minimum and maximum number of rows in a group, 0 is not set. (default: 0)\n * @ko 한 그룹에 들어가는 행의 최소, 최대 개수, 0은 미설정이다. (default: 0)\n * @name Grid.JustifiedGrid#rowRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"rowRange\"]}\n * @example\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   rowRange: 0,\n * });\n *\n * grid.rowRange = [3, 4];\n */\n\n/**\n * The minimum and maximum size by which the item is adjusted. If it is not calculated, it may deviate from the minimum and maximum sizes. (default: [0, Infinity])\n * @ko 아이템이 조정되는 최소, 최대 사이즈. 계산이 되지 않는 경우 최소, 최대 사이즈를 벗어날 수 있다. (default: [0, Infinity])\n * @name Grid.JustifiedGrid#sizeRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"sizeRange\"]}\n * @example\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   sizeRange: [0, Infinity],\n * });\n *\n * grid.sizeRange = [200, 800];\n */\n","import Grid from \"../Grid\";\nimport { PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines, GridRect } from \"../types\";\nimport { GetterSetter, range } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\n\n\nfunction getMaxPoint(outline: number[]) {\n  let maxPoint = -Infinity;\n\n  outline.forEach((point) => {\n    if (isFinite(point)) {\n      maxPoint = Math.max(maxPoint, point);\n    }\n  });\n  return isFinite(maxPoint) ? maxPoint : 0;\n}\nfunction getMinPoint(outline: number[]) {\n  let minPoint = Infinity;\n\n  outline.forEach((point) => {\n    if (isFinite(point)) {\n      minPoint = Math.min(minPoint, point);\n    }\n  });\n  return isFinite(minPoint) ? minPoint : 0;\n}\nfunction getOutlinePoint(startOutline: number[], frameOutline: number[], useFrameFill: boolean) {\n  return getMaxPoint(startOutline)\n    + getOutlineDist(startOutline, frameOutline, useFrameFill);\n}\n\nfunction getOutlineDist(startOutline: number[], endOutline: number[], useFrameFill: boolean) {\n  const length = startOutline.length;\n\n  if (!length) {\n    return 0;\n  }\n  const minEndPoint = getMinPoint(endOutline);\n  const maxStartPoint = getMaxPoint(startOutline);\n  let frameDist = 0;\n\n  if (!useFrameFill) {\n    return 0;\n  }\n\n\n  for (let outlineIndex = 0; outlineIndex < length; ++outlineIndex) {\n    const startPoint = startOutline[outlineIndex];\n    const endPoint = endOutline[outlineIndex];\n\n    if (!isFinite(startPoint) || !isFinite(endPoint)) {\n      continue;\n    }\n    const startPos = startPoint - maxStartPoint;\n    const endPos = endPoint - minEndPoint;\n\n\n    // Fill empty block.\n    frameDist = outlineIndex ? Math.max(frameDist, frameDist + startPos - endPos) : startPos - endPos;\n  }\n\n  return frameDist;\n}\nfunction fillOutlines(startOutline: number[], endOutline: number[], rect: {\n  inlinePos: number;\n  inlineSize: number;\n  contentPos: number;\n  contentSize: number;\n}) {\n  const {\n    inlinePos,\n    inlineSize,\n    contentPos,\n    contentSize,\n  } = rect;\n  for (\n    let outlineIndex = inlinePos;\n    outlineIndex < inlinePos + inlineSize;\n    ++outlineIndex\n  ) {\n    startOutline[outlineIndex] = Math.min(startOutline[outlineIndex], contentPos);\n    endOutline[outlineIndex] = Math.max(endOutline[outlineIndex], contentPos + contentSize);\n  }\n}\nexport interface FrameRect extends Required<GridRect> {\n  type: any;\n}\n/**\n * @typedef\n * @memberof Grid.FrameGrid\n * @extends Grid.GridOptions\n * @property - The shape of the Grid. You can set the shape of the item as a 2d array. 0 and \"\" are empty spaces, and the order of items is determined in ascending order. (default: []) <ko>Grid의 모양. 2d 배열로 아이템의 모양을 설정할 수 있다. 0과 \"\"은 공백이며 아이템의 순서는 오름차순으로 결정된다. (default: [])</ko>\n * @property - Make sure that the frame can be attached after the previous frame. (default: true) <ko> 다음 프레임이 전 프레임에 이어 붙일 수 있는지 있는지 확인한다.</ko>\n * @property - 1x1 rect size. If it is 0, it is determined by the number of columns in the frame. (default: 0) <ko>1x1 직사각형 크기. 0이면 frame의 column의 개수에 의해 결정된다. (default: 0)</ko>\n */\nexport interface FrameGridOptions extends GridOptions {\n  frame?: number[][];\n  useFrameFill?: boolean;\n  rectSize?: number | { inlineSize: number, contentSize: number };\n}\n\n/**\n * 'Frame' is a printing term with the meaning that 'it fits in one row wide'. FrameGrid is a grid that the card is filled up on the basis of a line given a size.\n * @ko 'Frame'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. FrameGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 카드가 가득 차도록 배치하는 Grid다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.FrameGrid.FrameGridOptions} options - The option object of the FrameGrid module <ko>FrameGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class FrameGrid extends Grid<FrameGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    frame: PROPERTY_TYPE.RENDER_PROPERTY,\n    useFrameFill: PROPERTY_TYPE.RENDER_PROPERTY,\n    rectSize: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<FrameGridOptions> = {\n    ...Grid.defaultOptions,\n    frame: [],\n    rectSize: 0,\n    useFrameFill: true,\n  };\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const frame = this._getFrame();\n    const {\n      inlineSize: frameInlineSize,\n      contentSize: frameContentSize,\n      rects: frameRects,\n    } = frame;\n    const {\n      gap,\n      useFrameFill,\n    } = this.options;\n\n    const {\n      inlineSize: rectInlineSize,\n      contentSize: rectContentSize,\n    } = this.getRectSize(frameInlineSize);\n\n\n    const itemsLength = items.length;\n\n    if (!itemsLength || !frameInlineSize || !frameContentSize) {\n      return { start: outline, end: outline };\n    }\n    const rectsLength = frameRects.length;\n    let startOutline = range(frameInlineSize).map(() => Infinity);\n    let endOutline = range(frameInlineSize).map(() => -Infinity);\n    const frameOutline = frame.outline.map((point) => point * (rectContentSize + gap));\n\n    for (let startIndex = 0; startIndex < itemsLength; startIndex += rectsLength) {\n      // Compare group's startOutline and startOutline of rect\n      const startPoint = getOutlinePoint(endOutline, frameOutline, useFrameFill);\n\n      for (let rectIndex = 0; rectIndex < rectsLength && startIndex + rectIndex < itemsLength; ++rectIndex) {\n        const item = items[startIndex + rectIndex];\n        const {\n          contentPos: frameRectContentPos,\n          inlinePos: frameRectInlinePos,\n          contentSize: frameRectContentSize,\n          inlineSize: frameRectInlineSize,\n        } = frameRects[rectIndex];\n        const contentPos = startPoint + frameRectContentPos * (rectContentSize + gap);\n        const inlinePos = frameRectInlinePos * (rectInlineSize + gap);\n        const contentSize = frameRectContentSize * (rectContentSize + gap) - gap;\n        const inlineSize = frameRectInlineSize * (rectInlineSize + gap) - gap;\n\n        fillOutlines(startOutline, endOutline, {\n          inlinePos: frameRectInlinePos,\n          inlineSize: frameRectInlineSize,\n          contentPos: contentPos,\n          contentSize: contentSize + gap,\n        });\n        item.setCSSGridRect({\n          inlinePos,\n          contentPos,\n          inlineSize,\n          contentSize,\n        });\n      }\n    }\n    const isDirectionEnd = direction === \"end\";\n\n    let gridOutline = outline;\n\n    if (gridOutline.length !== frameInlineSize) {\n      const point = isDirectionEnd ? Math.max(...gridOutline) : Math.min(...gridOutline);\n\n      gridOutline = range(frameInlineSize).map(() => point);\n    }\n    startOutline = startOutline.map((point) => isFinite(point) ? point : 0);\n    endOutline = endOutline.map((point) => isFinite(point) ? point : 0);\n    const outlineDist = isDirectionEnd\n      ? getOutlineDist(startOutline, gridOutline, useFrameFill)\n      : getOutlineDist(gridOutline, endOutline, useFrameFill);\n\n    items.forEach((item) => {\n      item.cssContentPos += outlineDist;\n    });\n\n    return {\n      start: startOutline.map((point) => point + outlineDist),\n      end: endOutline.map((point) => point + outlineDist),\n    };\n  }\n  protected getRectSize(frameInlineSize: number) {\n    const {\n      gap,\n      rectSize: rectSizeOption,\n    } = this.options;\n\n    if (typeof rectSizeOption === \"object\") {\n      return rectSizeOption;\n    }\n    const rectSizeValue = rectSizeOption\n      ? rectSizeOption\n      : (this.getContainerInlineSize()! + gap) / frameInlineSize - gap;\n\n    return { inlineSize: rectSizeValue, contentSize: rectSizeValue };\n  }\n  private _getFrame() {\n    const frame = this.options.frame;\n    const frameContentSize = frame.length;\n    const frameInlineSize = frameContentSize ? frame[0].length : 0;\n    const rects: FrameRect[] = [];\n    const passMap: Record<string, boolean> = {};\n    const startOutline = range(frameInlineSize).map(() => Infinity);\n    const endOutline = range(frameInlineSize).map(() => -Infinity);\n\n    for (let y1 = 0; y1 < frameContentSize; ++y1) {\n      for (let x1 = 0; x1 < frameInlineSize; ++x1) {\n        const type = frame[y1][x1];\n\n        if (!type) {\n          continue;\n        }\n        if (passMap[`${y1},${x1}`]) {\n          continue;\n        }\n        const rect = this._findRect(passMap, type, y1, x1, frameInlineSize, frameContentSize);\n\n        fillOutlines(startOutline, endOutline, rect);\n        rects.push(rect);\n      }\n    }\n    rects.sort((a, b) => (a.type < b.type ? -1 : 1));\n\n\n    return {\n      rects,\n      inlineSize: frameInlineSize,\n      contentSize: frameContentSize,\n      outline: startOutline,\n    };\n  }\n  private _findRect(\n    passMap: Record<string, boolean>,\n    type: number,\n    y1: number,\n    x1: number,\n    frameInlineSize: number,\n    frameContentSize: number,\n  ) {\n    const frame = this.options.frame;\n\n    let contentSize = 1;\n    let inlineSize = 1;\n\n    // find rect\n    for (let x2 = x1; x2 < frameInlineSize; ++x2) {\n      if (frame[y1][x2] === type) {\n        inlineSize = x2 - x1 + 1;\n        continue;\n      }\n      break;\n    }\n    for (let y2 = y1; y2 < frameContentSize; ++y2) {\n      if (frame[y2][x1] === type) {\n        contentSize = y2 - y1 + 1;\n        continue;\n      }\n      break;\n    }\n\n    // pass rect\n    for (let y = y1; y < y1 + contentSize; ++y) {\n      for (let x = x1; x < x1 + inlineSize; ++x) {\n        passMap[`${y},${x}`] = true;\n      }\n    }\n\n    const rect: FrameRect = {\n      type,\n      inlinePos: x1,\n      contentPos: y1,\n      inlineSize,\n      contentSize,\n    };\n    return rect;\n  }\n}\n\nexport interface FrameGrid extends Properties<typeof FrameGrid> {\n}\n\n\n/**\n * The shape of the Grid. You can set the shape of the item as a 2d array. 0 and space are empty spaces, and the order of items is determined in ascending order. (default: [])\n * @ko grid의 모양. 2d 배열로 아이템의 모양을 설정할 수 있다. 0과 공백은 빈 공간이며 아이템의 순서는 오름차순으로 결정된다. (default: [])\n * @name Grid.FrameGrid#frame\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"frame\"]}\n * @example\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * const grid = new FrameGrid(container, {\n *   frame: [\n *     [1, 1, 0, 0, 2, 3],\n *     [1, 1, 0, 4, 5, 5],\n *   ],\n * });\n *\n * grid.frame = [\n *   [1, 1, 0, 0, 2, 2],\n *   [1, 1, 0, 0, 2, 2],\n * ];\n */\n\n/**\n * Make sure that the frame can be attached after the previous frame. (default: true)\n * @ko 다음 프레임이 전 프레임에 이어 붙일 수 있는지 있는지 확인한다. (default: true)\n * @name Grid.FrameGrid#useFrameFill\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"useFrameFill\"]}\n * @example\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * const grid = new FrameGrid(container, {\n *   useFrameFill: true,\n * });\n *\n * grid.useFrameFill = false;\n */\n\n/**\n * 1x1 rect size. If it is 0, it is determined by the number of columns in the frame. (default: 0)\n * @ko 1x1 직사각형 크기. 0이면 frame의 column의 개수에 의해 결정된다. (default: 0)\n * @name Grid.FrameGrid#rectSize\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"rectSize\"]}\n * @example\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * const grid = new FrameGrid(container, {\n *   rectSize: 0,\n * });\n *\n * grid.rectSize = { inlineSize: 100, contentSize: 150 };\n */\n","export interface BoxModelStatus {\n  orgInlineSize: number;\n  orgContentSize: number;\n  inlineSize: number;\n  contentSize: number;\n  inlinePos: number;\n  contentPos: number;\n  items: BoxModel[];\n}\n\nexport default class BoxModel implements BoxModelStatus {\n  public orgInlineSize: number;\n  public orgContentSize: number;\n  public inlineSize: number;\n  public contentSize: number;\n  public inlinePos: number;\n  public contentPos: number;\n  public items: BoxModel[];\n  constructor(status: Partial<BoxModelStatus>) {\n    const boxStatus = {\n      orgInlineSize: 0,\n      orgContentSize: 0,\n      inlineSize: 0,\n      contentSize: 0,\n      inlinePos: 0,\n      contentPos: 0,\n      items: [],\n      ...status,\n    };\n    for (const name in boxStatus) {\n      this[name] = boxStatus[name];\n    }\n  }\n  public scaleTo(inlineSize: number, contentSize: number) {\n    const scaleX = this.inlineSize ? inlineSize / this.inlineSize : 0;\n    const scaleY = this.contentSize ? contentSize / this.contentSize : 0;\n\n    this.items.forEach((item) => {\n      if (scaleX !== 0) {\n        item.inlinePos *= scaleX;\n        item.inlineSize *= scaleX;\n      }\n      if (scaleY !== 0) {\n        item.contentPos *= scaleY;\n        item.contentSize *= scaleY;\n      }\n    });\n\n    this.inlineSize = inlineSize;\n    this.contentSize = contentSize;\n  }\n  public push(item: BoxModel) {\n    this.items.push(item);\n  }\n  public getOrgSizeWeight() {\n    return this.orgInlineSize * this.orgContentSize;\n  }\n  public getSize() {\n    return this.inlineSize * this.contentSize;\n  }\n  public getOrgRatio() {\n    return (this.orgContentSize === 0) ? 0 : this.orgInlineSize / this.orgContentSize;\n  }\n  public getRatio() {\n    return (this.contentSize === 0) ? 0 : this.inlineSize / this.contentSize;\n  }\n}\n","import Grid from \"../Grid\";\nimport { PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines } from \"../types\";\nimport { GetterSetter } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\nimport BoxModel from \"./lib/BoxModel\";\n\n\nfunction getCost(originLength: number, length: number) {\n  let cost = originLength / length;\n\n  if (cost < 1) {\n    cost = 1 / cost;\n  }\n\n  return cost - 1;\n}\nfunction fitArea(\n  item: BoxModel,\n  bestFitArea: BoxModel,\n  itemFitSize: { inlineSize: number, contentSize: number },\n  containerFitSize: { inlineSize: number, contentSize: number },\n  isContentDirection: boolean,\n) {\n  item.contentSize = itemFitSize.contentSize;\n  item.inlineSize = itemFitSize.inlineSize;\n  bestFitArea.contentSize = containerFitSize.contentSize;\n  bestFitArea.inlineSize = containerFitSize.inlineSize;\n\n  if (isContentDirection) {\n    item.contentPos = bestFitArea.contentPos + bestFitArea.contentSize;\n    item.inlinePos = bestFitArea.inlinePos;\n  } else {\n    item.inlinePos = bestFitArea.inlinePos + bestFitArea.inlineSize;\n    item.contentPos = bestFitArea.contentPos;\n  }\n}\n\n\n/**\n * @typedef\n * @memberof Grid.PackingGrid\n * @extends Grid.GridOptions\n * @property - The number of columns. If the number of columns is 0, it is automatically calculated according to the size of the container. <ko>열의 개수. 열의 개수가 0이라면, 컨테이너의 사이즈에 의해 계산이 된다. (default: 0) </ko>\n * @property - The size of the columns. If it is 0, it is calculated as the size of the first item in items. (default: 0) <ko> 열의 사이즈. 만약 열의 사이즈가 0이면, 아이템들의 첫번째 아이템의 사이즈로 계산이 된다. (default: 0) </ko>\n * @property - The size ratio(inlineSize / contentSize) of the columns. 0 is not set. (default: 0) <ko>열의 사이즈 비율(inlineSize / contentSize). 0은 미설정이다. </ko>\n * @property - Align of the position of the items. If you want to use `stretch`, be sure to set `column` or `columnSize` option. (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\") <ko>아이템들의 위치의 정렬. `stretch`를 사용하고 싶다면 `column` 또는 `columnSize` 옵션을 설정해라.  (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\")</ko>\n */\nexport interface PackingGridOptions extends GridOptions {\n  aspectRatio?: number;\n  sizeWeight?: number;\n  ratioWeight?: number;\n}\n\n/**\n * The PackingGrid is a layout that stacks cards with the same inlineSize as a stack of bricks. Adjust the inlineSize of all images to the same size, find the lowest contentSize column, and insert a necontentSize.\n *\n * @ko PackingGrid는 벽돌을 쌓아 올린 모양처럼 동일한 너비를 가진 카드를 쌓는 레이아웃이다. 모든 이미지의 너비를 동일한 크기로 조정하고, 가장 높이가 낮은 열을 찾아 새로운 이미지를 삽입한다. 따라서 배치된 카드 사이에 빈 공간이 생기지는 않지만 배치된 레이아웃의 아래쪽은 울퉁불퉁해진다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.PackingGrid.PackingGridOptions} options - The option object of the PackingGrid module <ko>PackingGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class PackingGrid extends Grid<PackingGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    aspectRatio: PROPERTY_TYPE.RENDER_PROPERTY,\n    sizeWeight: PROPERTY_TYPE.RENDER_PROPERTY,\n    ratioWeight: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<PackingGridOptions> = {\n    ...Grid.defaultOptions,\n    aspectRatio: 1,\n    sizeWeight: 1,\n    ratioWeight: 1,\n  };\n\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const { aspectRatio, gap } = this.options;\n    const containerInlineSize = this.getContainerInlineSize();\n    const containerContentSize = containerInlineSize / aspectRatio;\n    const prevOutline = outline.length ? outline : [0];\n    const startPoint = direction === \"end\"\n      ? Math.max(...prevOutline)\n      : Math.min(...prevOutline) - containerContentSize - gap;\n    const endPoint = startPoint + containerContentSize + gap;\n    const container = new BoxModel({});\n\n    items.forEach((item) => {\n      const model = new BoxModel({\n        inlineSize: item.orgInlineSize,\n        contentSize: item.orgContentSize,\n        orgInlineSize: item.orgInlineSize,\n        orgContentSize: item.orgContentSize,\n      });\n\n      this._findBestFitArea(container, model);\n      container.push(model);\n      container.scaleTo(containerInlineSize + gap, containerContentSize + gap);\n    });\n    items.forEach((item, i) => {\n      const boxItem = container.items[i];\n      const inlineSize = boxItem.inlineSize - gap;\n      const contentSize = boxItem.contentSize - gap;\n      const contentPos = startPoint + boxItem.contentPos;\n      const inlinePos = boxItem.inlinePos;\n\n      item.setCSSGridRect({\n        inlinePos,\n        contentPos,\n        inlineSize,\n        contentSize,\n      });\n    });\n\n    return {\n      start: [startPoint],\n      end: [endPoint],\n    };\n  }\n  private _findBestFitArea(container: BoxModel, item: BoxModel) {\n    if (container.getRatio() === 0) { // 아이템 최초 삽입시 전체영역 지정\n      container.orgInlineSize = item.inlineSize;\n      container.orgContentSize = item.contentSize;\n      container.inlineSize = item.inlineSize;\n      container.contentSize = item.contentSize;\n      return;\n    }\n\n    let bestFitArea!: BoxModel;\n    let minCost = Infinity;\n    let isContentDirection = false;\n    const itemFitSize = {\n      inlineSize: 0,\n      contentSize: 0,\n    };\n    const containerFitSize = {\n      inlineSize: 0,\n      contentSize: 0,\n    };\n    const { sizeWeight, ratioWeight } = this.options;\n\n    container.items.forEach((child) => {\n      const containerSizeCost = getCost(child.getOrgSizeWeight(), child.getSize()) * sizeWeight;\n      const containerRatioCost = getCost(child.getOrgRatio(), child.getRatio()) * ratioWeight;\n      const inlineSize = child.inlineSize;\n      const contentSize = child.contentSize;\n      for (let i = 0; i < 2; ++i) {\n        let itemInlineSize;\n        let itemContentSize;\n        let containerInlineSize;\n        let containerContentSize;\n\n        if (i === 0) {\n          // add item to content pos (top, bottom)\n          itemInlineSize = inlineSize;\n          itemContentSize = contentSize * (item.contentSize / (child.orgContentSize + item.contentSize));\n          containerInlineSize = inlineSize;\n          containerContentSize = contentSize - itemContentSize;\n        } else {\n          // add item to inline pos (left, right)\n          itemContentSize = contentSize;\n          itemInlineSize = inlineSize * (item.inlineSize / (child.orgInlineSize + item.inlineSize));\n          containerContentSize = contentSize;\n          containerInlineSize = inlineSize - itemInlineSize;\n        }\n\n        const itemSize = itemInlineSize * itemContentSize;\n        const itemRatio = itemInlineSize / itemContentSize;\n        const containerSize = containerInlineSize * containerContentSize;\n        const containerRatio = containerContentSize / containerContentSize;\n\n        let cost = getCost(item.getSize(), itemSize) * sizeWeight;\n        cost += getCost(item.getRatio(), itemRatio) * ratioWeight;\n        cost += getCost(child.getOrgSizeWeight(), containerSize) * sizeWeight - containerSizeCost;\n        cost += getCost(child.getOrgRatio(), containerRatio) * ratioWeight - containerRatioCost;\n\n        if (cost === Math.min(cost, minCost)) {\n          minCost = cost;\n          bestFitArea = child;\n          isContentDirection = (i === 0);\n          itemFitSize.inlineSize = itemInlineSize;\n          itemFitSize.contentSize = itemContentSize;\n          containerFitSize.inlineSize = containerInlineSize;\n          containerFitSize.contentSize = containerContentSize;\n        }\n      }\n    });\n\n    fitArea(item, bestFitArea, itemFitSize, containerFitSize, isContentDirection);\n  }\n}\n\nexport interface PackingGrid extends Properties<typeof PackingGrid> {\n}\n\n\n/**\n * Align of the position of the items. If you want to use `stretch`, be sure to set `column` or `columnSize` option. (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\")\n * @ko 아이템들의 위치의 정렬. `stretch`를 사용하고 싶다면 `column` 또는 `columnSize` 옵션을 설정해라.  (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\")\n * @name Grid.PackingGrid#align\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"align\"]}\n * @example\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   align: \"start\",\n * });\n *\n * grid.align = \"justify\";\n */\n\n\n/**\n * The number of columns. If the number of columns is 0, it is automatically calculated according to the size of the container.\n * @ko 열의 개수. 열의 개수가 0이라면, 컨테이너의 사이즈에 의해 계산이 된다. (default: 0)\n * @name Grid.PackingGrid#column\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"column\"]}\n * @example\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   column: 0,\n * });\n *\n * grid.column = 4;\n */\n\n\n/**\n * The size of the columns. If it is 0, it is calculated as the size of the first item in items. (default: 0)\n * @ko 열의 사이즈. 만약 열의 사이즈가 0이면, 아이템들의 첫번째 아이템의 사이즈로 계산이 된다. (default: 0)\n * @name Grid.PackingGrid#columnSize\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"columnSize\"]}\n * @example\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   columnSize: 0,\n * });\n *\n * grid.columnSize = 200;\n */\n\n\n/**\n * The size ratio(inlineSize / contentSize) of the columns. 0 is not set. (default: 0)\n * @ko 열의 사이즈 비율(inlineSize / contentSize). 0은 미설정이다.\n * @name Grid.PackingGrid#columnSizeRatio\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"columnSizeRatio\"]}\n * @example\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   columnSizeRatio: 0,\n * });\n *\n * grid.columnSizeRatio = 0.5;\n */\n"],"names":["DEFAULT_GRID_OPTIONS","horizontal","useTransform","percentage","isEqualSize","isConstantSize","gap","attributePrefix","resizeDebounce","maxResizeDebounce","autoResize","defaultDirection","externalContainerManager","externalItemRenderer","renderOnPropertyChange","PROPERTY_TYPE","MOUNT_STATE","UPDATE_STATE","GRID_PROPERTY_TYPES","RENDER_PROPERTY","PROPERTY","GRID_METHODS","GRID_EVENTS","RECT_NAMES","inlinePos","contentPos","inlineSize","contentSize","vertical","container","options","_init","setRect","width","offsetWidth","height","offsetHeight","rect","status","setContentSize","getContentSize","size","sizeName","style","preserveUI","cssText","orgCSSText","window","getComputedStyle","position","getKeys","obj","Object","keys","isString","val","isObject","isNumber","camelize","str","replace","all","letter","toUpperCase","getDataAttributes","element","dataAttributes","attributes","length","i","attribute","name","value","indexOf","GetterSetter","component","prototype","propertyTypes","shouldRender","enumerable","configurable","get","set","prevValue","scheduleRender","defineProperty","withMethods","methods","memberName","forEach","_i","args","result","_a","range","arr","push","getRangeCost","Math","max","withGridMethods","initialRect","items","item","_this","_renderItem","containerRect","_updateItem","sizePercentage","posPercentage","posPercetage","sizePercetage","orgRect","hasOrgRect","left","offsetLeft","top","offsetTop","mountState","MOUNTED","updateState","NEED_UPDATE","UPDATED","cssRect","cssTexts","_b","posName","getInlineSize","filter","key","map","join","itemStatus","data","UNCHECKED","gridRect","names","__extends","containerElement","_super","start","end","clearTimeout","_resizeTimer","_maxResizeDebounceTimer","renderItems","useResize","setTimeout","_onResize","constructor","defaultOptions","document","querySelector","containerManager","ContainerManager","itemRenderer","ItemRenderer","Grid","slice","call","children","outlines","elements","getChildren","diff","added","maintained","changed","removed","nextItems","beforeIndex","afterIndex","index","GridItem","setItems","checkReady","_clearRenderTimer","getItems","syncElements","_resizeContainer","updateItems","getStatus","prevInlineSize","setStatus","_renderComplete","mounted","updated","isResize","destroy","removeEventListener","_scheduleResize","_im","moreUpdated","ImReady","prefix","on","e","hasLoading","WAIT_LOADING","_renderItems","isPreReadyOver","trigger","target","update","check","_renderTimer","startOutline","endOutline","outlineOffset","min","point","cssContentPos","prevOutlines","direction","prevOutline","outline","nextOutlines","applyGrid","setOutlines","_fit","_refreshContainerContentSize","endPoint","startPoint","resize","setContainerRect","getRect","addEventListener","Component","_calculateColumnSize","_calculateColumn","column","_column","columnSize","_columnSize","align","columnSizeRatio","outlineLength","itemsLength","alignPoses","_getAlignPoses","isEndDirection","pointCalculateName","indexCalculateName","point_1","columnDist","isStretch","columnIndex","columnAttribute","parseInt","maxColumn","itemColumn","ceil","endColumnIndex","columnOutline","columnPoint","nextEndColumnIndex","cssInlineSize","cssContentSize","endContentPos","cssInlinePos","indexOffset","columnSizeOption","floor","getContainerInlineSize","items_1","columnOption","containerSize","indexes","offset","dist","countDist","totalColumnSize","MasonryGrid","single_source_shortest_paths","graph","s","d","predecessors","costs","open","BinaryHeap","x","cost","closest","u","cost_of_s_to_u","adjacent_nodes","cost_of_e","cost_of_s_to_u_plus_cost_of_e","cost_of_s_to_v","first_visit","pop","v","msg","Error","extract_shortest_path_from_predecessor_list","nodes","reverse","find_path","scoreFunction","content","bubbleUp","sinkDown","_n","n","parentN","parent","elemScore","child1Score","child2N","child1N","swap","child1","child2","child2Score","rowRange","path","_getRowPath","_getPath","_setStyle","columnRangeOption","rowRangeOption","columnRange","pathLink","_getRowLink","currentNode","node","currentLink","minColumn","minRow","maxRow","lastNode","pathLength","rangeCost","lastCost","abs","_getCost","isOver","_searchRowLink","links","nextNode","nextCost","nextLink","sort","a","b","aIsOver","bIsOver","aRangeCost","bRangeCost","reduce","sum","orgInlineSize","orgContentSize","j","_getSize","sizeRange","minSize","maxSize","isFinite","pow","nodeKey","results","path1","path2","pathItems","pathItemsLength","prevItem","setCSSGridRect","JustifiedGrid","Infinity","getMaxPoint","maxPoint","getMinPoint","minPoint","getOutlinePoint","frameOutline","useFrameFill","getOutlineDist","minEndPoint","maxStartPoint","frameDist","outlineIndex","startPos","endPos","fillOutlines","frame","_getFrame","frameInlineSize","frameContentSize","frameRects","getRectSize","rectInlineSize","rectContentSize","rectsLength","startIndex","rectIndex","_c","frameRectContentPos","frameRectInlinePos","frameRectContentSize","frameRectInlineSize","isDirectionEnd","gridOutline","outlineDist","rectSizeOption","rectSizeValue","rects","passMap","y1","x1","type","_findRect","x2","y2","y","FrameGrid","rectSize","boxStatus","scaleX","scaleY","getCost","originLength","fitArea","bestFitArea","itemFitSize","containerFitSize","isContentDirection","aspectRatio","containerInlineSize","containerContentSize","BoxModel","model","_findBestFitArea","scaleTo","boxItem","getRatio","minCost","sizeWeight","ratioWeight","child","containerSizeCost","getOrgSizeWeight","getSize","containerRatioCost","getOrgRatio","itemInlineSize","itemContentSize","itemSize","itemRatio","containerRatio","PackingGrid"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,oBAAoB,GAA0B;AACzDC,EAAAA,UAAU,EAAE,KAD6C;AAEzDC,EAAAA,YAAY,EAAE,KAF2C;AAGzDC,EAAAA,UAAU,EAAE,KAH6C;AAIzDC,EAAAA,WAAW,EAAE,KAJ4C;AAKzDC,EAAAA,cAAc,EAAE,KALyC;AAMzDC,EAAAA,GAAG,EAAE,CANoD;AAOzDC,EAAAA,eAAe,EAAE,YAPwC;AAQzDC,EAAAA,cAAc,EAAE,GARyC;AASzDC,EAAAA,iBAAiB,EAAE,CATsC;AAUzDC,EAAAA,UAAU,EAAE,IAV6C;AAWzDC,EAAAA,gBAAgB,EAAE,KAXuC;AAYzDC,EAAAA,wBAAwB,EAAE,IAZ+B;AAazDC,EAAAA,oBAAoB,EAAE,IAbmC;AAczDC,EAAAA,sBAAsB,EAAE;AAdiC,CAApD;IAiBKC;;AAAZ,WAAYA;AACVA,EAAAA,4CAAA,aAAA;AACAA,EAAAA,mDAAA,oBAAA;AACD,CAHD,EAAYA,aAAa,KAAbA,aAAa,KAAA,CAAzB;;AAIA,IAAYC,WAAZ;;AAAA,WAAYA;AACVA,EAAAA,yCAAA,cAAA;AACAA,EAAAA,yCAAA,cAAA;AACAA,EAAAA,uCAAA,YAAA;AACD,CAJD,EAAYA,WAAW,KAAXA,WAAW,KAAA,CAAvB;;AAKA,IAAYC,YAAZ;;AAAA,WAAYA;AACVA,EAAAA,6CAAA,gBAAA;AACAA,EAAAA,8CAAA,iBAAA;AACAA,EAAAA,yCAAA,YAAA;AACD,CAJD,EAAYA,YAAY,KAAZA,YAAY,KAAA,CAAxB;;AAMO,IAAMC,mBAAmB,GAAG;AACjCZ,EAAAA,GAAG,EAAES,aAAa,CAACI,eADc;AAEjCR,EAAAA,gBAAgB,EAAEI,aAAa,CAACK,QAFC;AAGjCN,EAAAA,sBAAsB,EAAEC,aAAa,CAACK;AAHL,CAA5B;IAMMC,YAAY,GAAG,CAC1B,cAD0B,EAE1B,aAF0B,EAG1B,UAH0B,EAI1B,UAJ0B,EAK1B,aAL0B,EAM1B,wBAN0B;IASfC,WAAW,GAAG,CACzB,gBADyB,EAEzB,cAFyB;IAKdC,UAAU,GAAG;AACxBtB,EAAAA,UAAU,EAAE;AACVuB,IAAAA,SAAS,EAAE,KADD;AAEVC,IAAAA,UAAU,EAAE,MAFF;AAGVC,IAAAA,UAAU,EAAE,QAHF;AAIVC,IAAAA,WAAW,EAAE;AAJH,GADY;AAOxBC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,SAAS,EAAE,MADH;AAERC,IAAAA,UAAU,EAAE,KAFJ;AAGRC,IAAAA,UAAU,EAAE,OAHJ;AAIRC,IAAAA,WAAW,EAAE;AAJL;AAPc;;;;;ACrCxB,2BAAA,CAAsBE,SAAtB,EAA8CC,OAA9C;AAAsB,kBAAA,GAAAD,SAAA;AACpB,SAAKC,OAAL;AACE7B,MAAAA,UAAU,EAAED,oBAAoB,CAACC;OAC9B6B,QAFL;;AAKA,SAAKC,KAAL;AACD;;;;AACM,gBAAA,GAAP;AACE,QAAMF,SAAS,GAAG,KAAKA,SAAvB;AAEA,SAAKG,OAAL,CAAa;AACXC,MAAAA,KAAK,EAAEJ,SAAS,CAACK,WADN;AAEXC,MAAAA,MAAM,EAAEN,SAAS,CAACO;AAFP,KAAb;AAID,GAPM;;AAQA,iBAAA,GAAP;AACE,WAAO,KAAKC,IAAZ;AACD,GAFM;;AAGA,iBAAA,GAAP,UAAeA,IAAf;AACE,SAAKA,IAAL,gBAAiBA,KAAjB;AACD,GAFM;;AAGA,uBAAA,GAAP;AACE,WAAO,KAAKA,IAAL,CAAU,KAAKP,OAAL,CAAa7B,UAAb,GAA0B,QAA1B,GAAqC,OAA/C,CAAP;AACD,GAFM;;AAGA,wBAAA,GAAP;AACE,WAAO,KAAKoC,IAAL,CAAU,KAAKP,OAAL,CAAa7B,UAAb,GAA0B,OAA1B,GAAoC,QAA9C,CAAP;AACD,GAFM;;AAGA,mBAAA,GAAP;AACE,WAAO;AACLoC,MAAAA,IAAI,eAAO,KAAKA;AADX,KAAP;AAGD,GAJM;;AAKA,mBAAA,GAAP,UAAiBC,MAAjB;AACE,SAAKD,IAAL,gBAAiBC,MAAM,CAACD,KAAxB;AAEA,SAAKE,cAAL,CAAoB,KAAKC,cAAL,EAApB;AACD,GAJM;;AAKA,wBAAA,GAAP,UAAsBC,IAAtB;AACE,QAAMC,QAAQ,GAAG,KAAKZ,OAAL,CAAa7B,UAAb,GAA0B,OAA1B,GAAoC,QAArD;AACA,SAAKoC,IAAL,CAAUK,QAAV,IAAsBD,IAAtB;AACA,SAAKZ,SAAL,CAAec,KAAf,CAAqBD,QAArB,IAAoCD,IAAI,OAAxC;AACD,GAJM;;AAKA,iBAAA,GAAP,UAAeX,OAAf;AAAe,0BAAA,EAAA;AAAAA,MAAAA,YAAA;;;AACb,QAAI,CAACA,OAAO,CAACc,UAAb,EAAyB;AACvB,WAAKf,SAAL,CAAec,KAAf,CAAqBE,OAArB,GAA+B,KAAKC,UAApC;AACD;AACF,GAJM;;AAKC,eAAA,GAAR;AACE,QAAMjB,SAAS,GAAG,KAAKA,SAAvB;AACA,QAAMc,KAAK,GAAGI,MAAM,CAACC,gBAAP,CAAwBnB,SAAxB,CAAd;AAEA,SAAKiB,UAAL,GAAkBjB,SAAS,CAACc,KAAV,CAAgBE,OAAlC;;AAEA,QAAIF,KAAK,CAACM,QAAN,KAAmB,QAAvB,EAAiC;AAC/BpB,MAAAA,SAAS,CAACc,KAAV,CAAgBM,QAAhB,GAA2B,UAA3B;AACD;AACF,GATO;;AAUV,yBAAA;AAAC,GA/DD;;SCTgBC,QAAuCC;AACrD,SAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAP;AACD;AAED,SAAgBG,SAASC;AACvB,SAAO,OAAOA,GAAP,KAAe,QAAtB;AACD;AACD,SAAgBC,SAASD;AACvB,SAAO,OAAOA,GAAP,KAAe,QAAtB;AACD;AACD,SAAgBE,SAASF;AACvB,SAAO,OAAOA,GAAP,KAAe,QAAtB;AACD;AAED,SAAgBG,SAASC;AACvB,SAAOA,GAAG,CAACC,OAAJ,CAAY,gBAAZ,EAA8B,UAACC,GAAD,EAAMC,MAAN;AAAiB,WAAAA,MAAM,CAACC,WAAP,EAAA;AAAoB,GAAnE,CAAP;AACD;AAED,SAAgBC,kBAAkBC,SAAsB1D;AACtD,MAAM2D,cAAc,GAA2B,EAA/C;AACA,MAAMC,UAAU,GAAGF,OAAO,CAACE,UAA3B;AACA,MAAMC,MAAM,GAAGD,UAAU,CAACC,MAA1B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4B,EAAEC,CAA9B,EAAiC;AAC/B,QAAMC,SAAS,GAAGH,UAAU,CAACE,CAAD,CAA5B;AACQ,QAAAE,IAAI,GAAYD,SAAS,KAAzB;AAAA,QAAME,KAAK,GAAKF,SAAS,MAAzB;;AACR,QAAIC,IAAI,CAACE,OAAL,CAAalE,eAAb,MAAkC,CAAC,CAAvC,EAA0C;AACxC;AACD;;AACD2D,IAAAA,cAAc,CAACR,QAAQ,CAACa,IAAI,CAACX,OAAL,CAAarD,eAAb,EAA8B,EAA9B,CAAD,CAAT,CAAd,GAA8DiE,KAA9D;AACD;;AAED,SAAON,cAAP;AACD;AAED;;AACA,SAAgBQ,aAAaC;AAKzB,MAAAC,SAAS,GAEPD,SAAS,UAFX;AAAA,MACAE,aAAa,GACXF,SAAS,cAFX;;0BAGSJ;AACT,QAAMO,YAAY,GAAGD,aAAa,CAACN,IAAD,CAAb,KAAwBxD,aAAa,CAACI,eAA3D;AACA,QAAMgD,UAAU,GAAwB;AACtCY,MAAAA,UAAU,EAAE,IAD0B;AAEtCC,MAAAA,YAAY,EAAE,IAFwB;AAGtCC,MAAAA,GAAG,EAAH;AACE,eAAO,KAAKnD,OAAL,CAAayC,IAAb,CAAP;AACD,OALqC;AAMtCW,MAAAA,GAAG,EAAH,UAAgBV,KAAhB;AACE,YAAM1C,OAAO,GAAG,KAAKA,OAArB;AACA,YAAMqD,SAAS,GAAGrD,OAAO,CAACyC,IAAD,CAAzB;;AAEA,YAAIY,SAAS,KAAKX,KAAlB,EAAyB;AACvB;AACD;;AACD1C,QAAAA,OAAO,CAACyC,IAAD,CAAP,GAAgBC,KAAhB;;AAEA,YAAIM,YAAY,IAAIhD,OAAO,CAAChB,sBAA5B,EAAoD;AAClD,eAAKsE,cAAL;AACD;AACF;AAlBqC,KAAxC;AAoBAhC,IAAAA,MAAM,CAACiC,cAAP,CAAsBT,SAAtB,EAAiCL,IAAjC,EAAuCJ,UAAvC;;;AAtBF,OAAK,IAAMI,IAAX,IAAmBM,aAAnB;YAAWN;AAuBV;AACF;AAED,SAAgBe,YAAYC;AAC1B,SAAO,UAAUX,SAAV,EAA0BY,UAA1B;AACLD,IAAAA,OAAO,CAACE,OAAR,CAAgB,UAAClB,IAAD;AACd,UAAIA,IAAI,IAAIK,SAAZ,EAAuB;AACrB;AACD;;AACDA,MAAAA,SAAS,CAACL,IAAD,CAAT,GAAkB;;;AAAU,qBAAA;;aAAA,YAAAmB,uBAAAA;AAAAC,UAAAA,QAAA,gBAAA;;;AAC1B,YAAMC,MAAM,GAAG,CAAAC,KAAA,KAAKL,UAAL,CAAA,EAAiBjB,IAAjB,OAAA,GAAA,EAA0BoB,IAA1B,CAAf;;;AAGA,YAAIC,MAAM,KAAK,KAAKJ,UAAL,CAAf,EAAiC;AAC/B,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,iBAAOI,MAAP;AACD;AACF,OATD;AAUD,KAdD;AAeD,GAhBD;AAiBD;AAED,SAAgBE,MAAM1B;AACpB,MAAM2B,GAAG,GAAa,EAAtB;;AACA,OAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4B,EAAEC,CAA9B,EAAiC;AAC/B0B,IAAAA,GAAG,CAACC,IAAJ,CAAS3B,CAAT;AACD;;AACD,SAAO0B,GAAP;AACD;AAED,SAAgBE,aAAazB,OAAesB;AAC1C,SAAOI,IAAI,CAACC,GAAL,CAAS3B,KAAK,GAAGsB,KAAK,CAAC,CAAD,CAAtB,EAA2BA,KAAK,CAAC,CAAD,CAAL,GAAWtB,KAAtC,EAA6C,CAA7C,IAAkD,CAAzD;AACD;AAED;;;;;;;;;;;;;;;;AAeA,IAAa4B,eAAe,GAAGd,WAAW,CAACjE,YAAD,CAAnC;;ACvGP;;;AAOE,uBAAA,CAAYS,OAAZ;AAJU,oBAAA,GAAwC,IAAxC;AACA,sBAAA,GAAgB,KAAhB;AACA,qBAAA,GAAe,KAAf;AAGR,SAAKA,OAAL;AACEvB,MAAAA,eAAe,EAAEP,oBAAoB,CAACO;AACtCL,MAAAA,YAAY,EAAEF,oBAAoB,CAACE;AACnCD,MAAAA,UAAU,EAAED,oBAAoB,CAACC;AACjCE,MAAAA,UAAU,EAAEH,oBAAoB,CAACG;AACjCC,MAAAA,WAAW,EAAEJ,oBAAoB,CAACI;AAClCC,MAAAA,cAAc,EAAEL,oBAAoB,CAACK;OAClCyB,QAPL;;AASA,SAAKC,KAAL;AACD;;;;AACM,gBAAA,GAAP;AACE,SAAKsE,WAAL,GAAmB,IAAnB;AACD,GAFM;;AAGA,qBAAA,GAAP,UAAmBC,KAAnB;AAAA,oBAAA;;AACEA,IAAAA,KAAK,CAACb,OAAN,CAAc,UAACc,IAAD;AACZC,MAAAA,KAAI,CAACC,WAAL,CAAiBF,IAAjB;AACD,KAFD;AAGD,GAJM;;AAKA,uBAAA,GAAP;AACE,WAAO,KAAKG,aAAL,CAAmB,KAAK5E,OAAL,CAAa7B,UAAb,GAA0B,QAA1B,GAAqC,OAAxD,CAAP;AACD,GAFM;;AAGA,0BAAA,GAAP,UAAwBoC,IAAxB;AACE,SAAKqE,aAAL,GAAqBrE,IAArB;AACD,GAFM;;AAGA,qBAAA,GAAP,UAAmBiE,KAAnB;AAAA,oBAAA;;AACEA,IAAAA,KAAK,CAACb,OAAN,CAAc,UAACc,IAAD;AACZC,MAAAA,KAAI,CAACG,WAAL,CAAiBJ,IAAjB;AACD,KAFD;AAGD,GAJM;;AAKA,mBAAA,GAAP;AACE,WAAO;AACLF,MAAAA,WAAW,EAAE,KAAKA;AADb,KAAP;AAGD,GAJM;;AAKA,mBAAA,GAAP,UAAiB/D,MAAjB;AACE,SAAK+D,WAAL,GAAmB/D,MAAM,CAAC+D,WAA1B;AACD,GAFM;;AAGC,eAAA,GAAR;AACU,QAAAlG,UAAU,GAAK,KAAK2B,OAAL,WAAf;AAER,QAAI8E,cAAc,GAAG,KAArB;AACA,QAAIC,aAAa,GAAG,KAApB;;AAEA,QAAI1G,UAAU,KAAK,IAAnB,EAAyB;AACvByG,MAAAA,cAAc,GAAG,IAAjB;AACAC,MAAAA,aAAa,GAAG,IAAhB;AACD,KAHD,MAGO,IAAI1G,UAAJ,EAAgB;AACrB,UAAIA,UAAU,CAACsE,OAAX,CAAmB,UAAnB,IAAiC,CAAC,CAAtC,EAAyC;AACvCoC,QAAAA,aAAa,GAAG,IAAhB;AACD;;AACD,UAAI1G,UAAU,CAACsE,OAAX,CAAmB,MAAnB,IAA6B,CAAC,CAAlC,EAAqC;AACnCmC,QAAAA,cAAc,GAAG,IAAjB;AACD;AACF;;AAED,SAAKE,YAAL,GAAoBD,aAApB;AACA,SAAKE,aAAL,GAAqBH,cAArB;AACD,GApBO;;AAqBA,qBAAA,GAAR,UAAoBL,IAApB;AACQ,QAAAV,KAAkC,KAAK/D,OAAvC;AAAA,QAAE1B,WAAW,iBAAb;AAAA,QAAeC,cAAc,oBAA7B;AACN,QAAMgG,WAAW,GAAG,KAAKA,WAAzB;AACQ,QAAAW,OAAO,GAAcT,IAAI,QAAzB;AAAA,QAAStC,OAAO,GAAKsC,IAAI,QAAzB;AACR,QAAMU,UAAU,GAAGD,OAAO,IAAIA,OAAO,CAAC/E,KAAnB,IAA4B+E,OAAO,CAAC7E,MAAvD;AACA,QAAIE,IAAJ;;AAEA,QAAIjC,WAAW,IAAIiG,WAAnB,EAAgC;AAC9BhE,MAAAA,IAAI,GAAGgE,WAAP;AACD,KAFD,MAEO,IAAIhG,cAAc,IAAI4G,UAAtB,EAAkC;AACvC5E,MAAAA,IAAI,GAAG2E,OAAP;AACD,KAFM,MAEA,IAAI,CAAC/C,OAAL,EAAc;AACnB;AACD,KAFM,MAEA;AACL5B,MAAAA,IAAI,GAAG;AACL6E,QAAAA,IAAI,EAAEjD,OAAO,CAACkD,UADT;AAELC,QAAAA,GAAG,EAAEnD,OAAO,CAACoD,SAFR;AAGLpF,QAAAA,KAAK,EAAEgC,OAAO,CAAC/B,WAHV;AAILC,QAAAA,MAAM,EAAE8B,OAAO,CAAC7B;AAJX,OAAP;AAMD;;AACD,QAAI,CAAC6E,UAAL,EAAiB;AACfV,MAAAA,IAAI,CAACS,OAAL,gBAAoB3E,KAApB;AACD;;AACDkE,IAAAA,IAAI,CAAClE,IAAL,gBAAiBA,KAAjB;;AAEA,QAAIkE,IAAI,CAACtC,OAAT,EAAkB;AAChBsC,MAAAA,IAAI,CAACe,UAAL,GAAkBtG,WAAW,CAACuG,OAA9B;AACD;;AACD,QAAIhB,IAAI,CAACiB,WAAL,KAAqBvG,YAAY,CAACwG,WAAtC,EAAmD;AACjDlB,MAAAA,IAAI,CAACiB,WAAL,GAAmBvG,YAAY,CAACyG,OAAhC;AACD;;AACDnB,IAAAA,IAAI,CAACpC,UAAL,GAAkBF,OAAO,GAAGD,iBAAiB,CAACC,OAAD,EAAU,KAAKnC,OAAL,CAAavB,eAAvB,CAApB,GAA8D,EAAvF;AACA,SAAK8F,WAAL,gBAAwBhE,KAAxB;AAEA,WAAOA,IAAP;AACD,GApCO;;AAqCA,qBAAA,GAAR,UAAoBkE,IAApB;AACE,QAAMtC,OAAO,GAAGsC,IAAI,CAACtC,OAArB;AACA,QAAM0D,OAAO,GAAGpB,IAAI,CAACoB,OAArB;;AAEA,QAAI,CAAC1D,OAAD,IAAY,CAAC0D,OAAjB,EAA0B;AACxB;AACD;;AAEK,QAAA9B,KAGF,KAAK/D,OAHH;AAAA,QACJ7B,UAAU,gBADN;AAAA,QAEJC,YAAY,kBAFR;AAIN,QAAM2G,aAAa,GAAG,KAAKC,YAA3B;AACA,QAAMF,cAAc,GAAG,KAAKG,aAA5B;AACA,QAAMa,QAAQ,GAAa,CAAC,qBAAD,CAA3B;AACM,QAAAC,KAGFtG,UAAU,CAACtB,UAAU,GAAG,YAAH,GAAiB,UAA5B,CAHR;AAAA,QACQyC,QAAQ,gBADhB;AAAA,QAEOoF,OAAO,eAFd;AAIN,QAAMpG,UAAU,GAAG,KAAKqG,aAAL,EAAnB;AACA,QAAI1E,IAAI,GAAGH,OAAO,CAACyE,OAAD,CAAlB;;AAEA,QAAIzH,YAAJ,EAAkB;AAChBmD,MAAAA,IAAI,GAAGA,IAAI,CAAC2E,MAAL,CAAY,UAACC,GAAD;AAAS,eAAAA,GAAG,KAAK,KAAR,IAAiBA,GAAG,KAAK,MAAzB;AAA+B,OAApD,CAAP;AAEAL,MAAAA,QAAQ,CAAC5B,IAAT,CAAc,iBACV,gBAAa2B,OAAO,CAACT,IAAR,IAAgB,CAA7B,UAAA,IAAqCS,OAAO,CAACP,GAAR,IAAe,CAApD,UADU,CAAd;AAGD;;AACDQ,IAAAA,QAAQ,CAAC5B,IAAT,MAAA,CAAA4B,QAAA,EAAiBvE,IAAI,CAAC6E,GAAL,CAAS,UAAC3D,IAAD;AACxB,UAAMC,KAAK,GAAGmD,OAAO,CAACpD,IAAD,CAArB;;AAEA,UACGA,IAAI,KAAK7B,QAAT,IAAqBkE,cAAtB,IACCrC,IAAI,KAAKuD,OAAT,IAAoBjB,aAFvB,EAGE;AACA,eAAUtC,IAAI,OAAJ,GAAUC,KAAK,GAAG9C,UAAT,GAAuB,GAAhC,OAAV;AACD;;AACD,aAAU6C,IAAI,OAAJ,GAASC,KAAT,QAAV;AACD,KAVgB,CAAjB;AAYAP,IAAAA,OAAO,CAACtB,KAAR,CAAcE,OAAd,IAAyB+E,QAAQ,CAACO,IAAT,CAAc,EAAd,CAAzB;AACD,GA1CO;;AA2CV,qBAAA;AAAC,GAnJD;;ACcA;;;;;AAIA;;;AACE;;;;;AAKA,mBAAA,CACYlI,UADZ,EAEEmI,UAFF;AAEE,6BAAA,EAAA;AAAAA,MAAAA,eAAA;;;;;AADU,mBAAA,GAAAnI,UAAA;AAGV,QAAMgE,OAAO,GAAGmE,UAAU,CAACnE,OAA3B;;AACA,QAAM3B,MAAM;AACV2F,MAAAA,GAAG,EAAE;AACLjB,MAAAA,OAAO,EAAE;AAAEE,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,GAAG,EAAE,CAAhB;AAAmBnF,QAAAA,KAAK,EAAE,CAA1B;AAA6BE,QAAAA,MAAM,EAAE;AAArC;AACTE,MAAAA,IAAI,EAAE;AAAE6E,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,GAAG,EAAE,CAAhB;AAAmBnF,QAAAA,KAAK,EAAE,CAA1B;AAA6BE,QAAAA,MAAM,EAAE;AAArC;AACNwF,MAAAA,OAAO,EAAE;AACTxD,MAAAA,UAAU,EAAE;AACZkE,MAAAA,IAAI,EAAE;AACNf,MAAAA,UAAU,EAAEtG,WAAW,CAACsH;AACxBd,MAAAA,WAAW,EAAEvG,YAAY,CAACwG;AAC1BxD,MAAAA,OAAO,EAAEA,OAAO,IAAI;AACpBnB,MAAAA,UAAU,QAAEmB,OAAO,SAAP,IAAAA,OAAO,WAAP,SAAA,GAAAA,OAAO,CAAEtB,KAAT,CAAeE,0CAAW;OACnCuF,WAXL;;AAcA,SAAK,IAAM7D,IAAX,IAAmBjC,MAAnB,EAA2B;AACzB,WAAKiC,IAAL,IAAajC,MAAM,CAACiC,IAAD,CAAnB;AACD;AACF;;;AAMDnB,EAAAA,qBAAA,yBAAA;AALA;;;;;SAKA;AACE,UAAM4D,OAAO,GAAG,KAAKA,OAArB;AAEA,aAAO,KAAK/G,UAAL,GAAkB+G,OAAO,CAAC7E,MAA1B,GAAmC6E,OAAO,CAAC/E,KAAlD;AACD;;;GAJD;AAUAmB,EAAAA,qBAAA,0BAAA;AALA;;;;;SAKA;AACE,UAAM4D,OAAO,GAAG,KAAKA,OAArB;AAEA,aAAO,KAAK/G,UAAL,GAAkB+G,OAAO,CAAC/E,KAA1B,GAAkC+E,OAAO,CAAC7E,MAAjD;AACD;;;GAJD;AAUAiB,EAAAA,qBAAA,sBAAA;AALA;;;;;SAKA;AACE,UAAMf,IAAI,GAAG,KAAKA,IAAlB;AAEA,aAAO,KAAKpC,UAAL,GAAkBoC,IAAI,CAACF,MAAvB,GAAgCE,IAAI,CAACJ,KAA5C;AACD;;;GAJD;AAUAmB,EAAAA,qBAAA,uBAAA;AALA;;;;;SAKA;AACE,UAAMf,IAAI,GAAG,KAAKA,IAAlB;AAEA,aAAO,KAAKpC,UAAL,GAAkBoC,IAAI,CAACJ,KAAvB,GAA+BI,IAAI,CAACF,MAA3C;AACD;;;GAJD;AAUAiB,EAAAA,qBAAA,yBAAA;AALA;;;;;SAKA;AACE,UAAMuE,OAAO,GAAG,KAAKA,OAArB;AAEA,aAAO,KAAK1H,UAAL,GAAkB0H,OAAO,CAACxF,MAA1B,GAAoCwF,OAAO,CAAC1F,KAAnD;AACD;SAyCD,UAAyBP,UAAzB;AACE,UAAMiG,OAAO,GAAG,KAAKA,OAArB;AAEAA,MAAAA,OAAO,CAAC,KAAK1H,UAAL,GAAkB,QAAlB,GAA6B,OAA9B,CAAP,GAAgDyB,UAAhD;AACD;;;GAjDD;AAUA0B,EAAAA,qBAAA,0BAAA;AALA;;;;;SAKA;AACE,UAAMuE,OAAO,GAAG,KAAKA,OAArB;AAEA,aAAO,KAAK1H,UAAL,GAAkB0H,OAAO,CAAC1F,KAA1B,GAAmC0F,OAAO,CAACxF,MAAlD;AACD;SAoCD,UAA0BR,WAA1B;AACE,UAAMgG,OAAO,GAAG,KAAKA,OAArB;AAEAA,MAAAA,OAAO,CAAC,KAAK1H,UAAL,GAAkB,OAAlB,GAA4B,QAA7B,CAAP,GAAgD0B,WAAhD;AACD;;;GA5CD;AAUAyB,EAAAA,qBAAA,wBAAA;AALA;;;;;SAKA;AACE,UAAMuE,OAAO,GAAG,KAAKA,OAArB;AAEA,aAAO,KAAK1H,UAAL,GAAkB0H,OAAO,CAACP,GAA1B,GAAiCO,OAAO,CAACT,IAAhD;AACD;SAWD,UAAwB1F,SAAxB;AACE,UAAMmG,OAAO,GAAG,KAAKA,OAArB;AAEAA,MAAAA,OAAO,CAAC,KAAK1H,UAAL,GAAkB,KAAlB,GAA0B,MAA3B,CAAP,GAA4CuB,SAA5C;AACD;;;GAnBD;AAUA4B,EAAAA,qBAAA,yBAAA;AALA;;;;;SAKA;AACE,UAAMuE,OAAO,GAAG,KAAKA,OAArB;AAEA,aAAO,KAAK1H,UAAL,GAAkB0H,OAAO,CAACT,IAA1B,GAAkCS,OAAO,CAACP,GAAjD;AACD;SAMD,UAAyB3F,UAAzB;AACE,UAAMkG,OAAO,GAAG,KAAKA,OAArB;AAEAA,MAAAA,OAAO,CAAC,KAAK1H,UAAL,GAAkB,MAAlB,GAA2B,KAA5B,CAAP,GAA4CwB,UAA5C;AACD;;;GAdD;AAyBA;;;;;;AAKO,wBAAA,GAAP,UAAsB8G,QAAtB;AACE,QAAMC,KAAK,GAAGjH,UAAU,CAAC,KAAKtB,UAAL,GAAkB,YAAlB,GAAiC,UAAlC,CAAxB;AAEA,QAAMoC,IAAI,GAAY,EAAtB;;AAEA,SAAK,IAAMkC,IAAX,IAAmBgE,QAAnB,EAA6B;AAC3BlG,MAAAA,IAAI,CAACmG,KAAK,CAACjE,IAAD,CAAN,CAAJ,GAAoBgE,QAAQ,CAAChE,IAAD,CAA5B;AACD;;AACD,SAAKoD,OAAL,GAAetF,IAAf;AACD,GATM;AAUP;;;;;;AAIO,mBAAA,GAAP;AACE,WAAO;AACLiF,MAAAA,UAAU,EAAE,KAAKA,UADZ;AAELE,MAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLrD,MAAAA,UAAU,EAAE,KAAKA,UAHZ;AAILrB,MAAAA,UAAU,EAAE,KAAKA,UAJZ;AAKLmB,MAAAA,OAAO,EAAE,IALJ;AAMLgE,MAAAA,GAAG,EAAE,KAAKA,GANL;AAOLjB,MAAAA,OAAO,EAAE,KAAKA,OAPT;AAQL3E,MAAAA,IAAI,EAAE,KAAKA,IARN;AASLsF,MAAAA,OAAO,EAAE,KAAKA,OATT;AAULU,MAAAA,IAAI,EAAE,KAAKA;AAVN,KAAP;AAYD,GAbM;;AAcT,iBAAA;AAAC,GAlKD;;ACpBA;;;;AAIA;;;AAEYI,EAAAA,uBAAA;AA2BV;;;;;;AAIA,eAAA,CAAYC,gBAAZ,EAAoD5G,OAApD;AAAoD,0BAAA,EAAA;AAAAA,MAAAA,YAAA;;;AAApD,gBACE6G,WAAA,KAAA,SADF;;AAxBUnC,IAAAA,WAAA,GAAoB,EAApB;AACAA,IAAAA,cAAA,GAAyB;AACjCoC,MAAAA,KAAK,EAAE,EAD0B;AAEjCC,MAAAA,GAAG,EAAE;AAF4B,KAAzB;AAIFrC,IAAAA,kBAAA,GAAe,CAAf;AACAA,IAAAA,kBAAA,GAAe,CAAf;AACAA,IAAAA,6BAAA,GAA0B,CAA1B;;AA6WAA,IAAAA,eAAA,GAAY;AAClBsC,MAAAA,YAAY,CAACtC,KAAI,CAACuC,YAAN,CAAZ;AACAD,MAAAA,YAAY,CAACtC,KAAI,CAACwC,uBAAN,CAAZ;AAEAxC,MAAAA,KAAI,CAACwC,uBAAL,GAA+B,CAA/B;AACAxC,MAAAA,KAAI,CAACuC,YAAL,GAAoB,CAApB;;AACAvC,MAAAA,KAAI,CAACyC,WAAL,CAAiB;AACfC,QAAAA,SAAS,EAAE;AADI,OAAjB;AAGD,KATO;;AAUA1C,IAAAA,qBAAA,GAAkB;AAClB,UAAAX,KAGFW,KAAI,CAAC1E,OAHH;AAAA,UACJtB,cAAc,oBADV;AAAA,UAEJC,iBAAiB,uBAFb;;AAMN,UAAI,CAAC+F,KAAI,CAACwC,uBAAN,IAAiCvI,iBAAiB,IAAID,cAA1D,EAA0E;AACxEgG,QAAAA,KAAI,CAACwC,uBAAL,GAA+BjG,MAAM,CAACoG,UAAP,CAAkB3C,KAAI,CAAC4C,SAAvB,EAAkC3I,iBAAlC,CAA/B;AACD;;AACD,UAAI+F,KAAI,CAACuC,YAAT,EAAuB;AACrBD,QAAAA,YAAY,CAACtC,KAAI,CAACuC,YAAN,CAAZ;AACAvC,QAAAA,KAAI,CAACuC,YAAL,GAAoB,CAApB;AACD;;AACDvC,MAAAA,KAAI,CAACuC,YAAL,GAAoBhG,MAAM,CAACoG,UAAP,CAAkB3C,KAAI,CAAC4C,SAAvB,EAAkC5I,cAAlC,CAApB;AACD,KAfO;;AAnWNgG,IAAAA,KAAI,CAAC1E,OAAL,yBACO0E,KAAI,CAAC6C,WAAL,CACFC,iBACAxH,QAHL;AAMA0E,IAAAA,KAAI,CAACkC,gBAAL,GAAwBpF,QAAQ,CAACoF,gBAAD,CAAR,GACpBa,QAAQ,CAACC,aAAT,CAAoCd,gBAApC,CADoB,GAEpBA,gBAFJ;AAIM,QAAA7C,KAMFW,KAAI,CAAC1E,OANH;AAAA,QACJ1B,WAAW,iBADP;AAAA,QAEJC,cAAc,oBAFV;AAAA,QAGJH,YAAY,kBAHR;AAAA,QAIJD,UAAU,gBAJN;AAAA,QAKJE,UAAU,gBALN;;AASNqG,IAAAA,KAAI,CAACiD,gBAAL,GAAwB,IAAIC,gBAAJ,CAAqBlD,KAAI,CAACkC,gBAA1B,EAA4C;AAClEzI,MAAAA,UAAU;AADwD,KAA5C,CAAxB;AAGAuG,IAAAA,KAAI,CAACmD,YAAL,GAAoB,IAAIC,YAAJ,CAAiB;AACnC1J,MAAAA,YAAY,cADuB;AAEnCE,MAAAA,WAAW,aAFwB;AAGnCC,MAAAA,cAAc,gBAHqB;AAInCF,MAAAA,UAAU;AAJyB,KAAjB,CAApB;;AAOAqG,IAAAA,KAAI,CAACzE,KAAL;;;AACD;;;WAlEY8H;AAmEb;;;;;AAIO,kBAAA,GAAP;AACE,WAAO,KAAKvD,KAAZ;AACD,GAFM;AAGP;;;;;;AAIO,qBAAA,GAAP;AACE,WAAO,GAAGwD,KAAH,CAASC,IAAT,CAAc,KAAKrB,gBAAL,CAAsBsB,QAApC,CAAP;AACD,GAFM;AAGP;;;;;;;AAKO,kBAAA,GAAP,UAAgB1D,KAAhB;AACE,SAAKA,KAAL,GAAaA,KAAb;AACA,WAAO,IAAP;AACD,GAHM;AAIP;;;;;;AAIO,gCAAA,GAAP;AACE,WAAO,KAAKmD,gBAAL,CAAsB1B,aAAtB,EAAP;AACD,GAFM;AAGP;;;;;;AAIO,qBAAA,GAAP;AACE,WAAO,KAAKkC,QAAZ;AACD,GAFM;AAGP;;;;;;;AAKO,qBAAA,GAAP,UAAmBA,QAAnB;AACE,SAAKA,QAAL,GAAgBA,QAAhB;AACA,WAAO,IAAP;AACD,GAHM;AAIP;;;;;;;AAKO,sBAAA,GAAP,UAAoBnI,OAApB;AAAoB,0BAAA,EAAA;AAAAA,MAAAA,YAAA;;;AAClB,QAAMwE,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAMrG,UAAU,GAAG,KAAK6B,OAAL,CAAa7B,UAAhC;AACA,QAAMiK,QAAQ,GAAkB,KAAKC,WAAL,EAAhC;;AACM,QAAAtE,KAA0CuE,IAAI,CAAC,KAAK9D,KAAL,CAAW4B,GAAX,CAAe,UAAC3B,IAAD;AAAU,aAAAA,IAAI,CAACtC,OAAL;AAAa,KAAtC,CAAD,EAA0CiG,QAA1C,CAA9C;AAAA,QAAEG,KAAK,WAAP;AAAA,QAASC,UAAU,gBAAnB;AAAA,QAAqBC,OAAO,aAA5B;AAAA,QAA8BC,OAAO,aAArC;;AAEN,QAAMC,SAAS,GAAe,EAA9B;AAEAH,IAAAA,UAAU,CAAC7E,OAAX,CAAmB,UAACI,EAAD;UAAE6E,WAAW;UAAEC,UAAU;AAC1CF,MAAAA,SAAS,CAACE,UAAD,CAAT,GAAwBrE,KAAK,CAACoE,WAAD,CAA7B;AACD,KAFD;AAGAL,IAAAA,KAAK,CAAC5E,OAAN,CAAc,UAACmF,KAAD;AACZH,MAAAA,SAAS,CAACG,KAAD,CAAT,GAAmB,IAAIC,QAAJ,CAAa5K,UAAb,EAA0B;AAC3CgE,QAAAA,OAAO,EAAEiG,QAAQ,CAACU,KAAD;AAD0B,OAA1B,CAAnB;AAGD,KAJD;AAMA,SAAKE,QAAL,CAAcL,SAAd;;AAEA,QAAIJ,KAAK,CAACjG,MAAN,IAAgBoG,OAAO,CAACpG,MAAxB,IAAkCmG,OAAO,CAACnG,MAA9C,EAAsD;AACpD,WAAK6E,WAAL,CAAiBnH,OAAjB;AACD;;AACD,WAAO,IAAP;AACD,GAvBM;AAwBP;;;;;;;;AAMO,qBAAA,GAAP,UAAmBwE,KAAnB,EAAmDxE,OAAnD;AAAmB,wBAAA,EAAA;AAAAwE,MAAAA,QAAoB,KAAKA,KAAzB;;;AAAgC,0BAAA,EAAA;AAAAxE,MAAAA,YAAA;;;AACjDwE,IAAAA,KAAK,CAACb,OAAN,CAAc,UAACc,IAAD;AACZA,MAAAA,IAAI,CAACiB,WAAL,GAAmBvG,YAAY,CAACwG,WAAhC;AACD,KAFD;AAGA,SAAKsD,UAAL,CAAgBjJ,OAAhB;AACA,WAAO,IAAP;AACD,GANM;AAOP;;;;;;;AAKO,qBAAA,GAAP,UAAmBA,OAAnB;AAAmB,0BAAA,EAAA;AAAAA,MAAAA,YAAA;;;AACjB,SAAKkJ,iBAAL;;AAEA,QAAI,CAAC,KAAKC,QAAL,GAAgB7G,MAAjB,IAA2B,KAAK+F,WAAL,GAAmB/F,MAAlD,EAA0D;AACxD,WAAK8G,YAAL,CAAkBpJ,OAAlB;AACD,KAFD,MAEO,IAAIA,OAAO,CAACoH,SAAZ,EAAuB;AAC5B;AACA,WAAKiC,gBAAL;;AACA,WAAKC,WAAL,CAAiB,KAAK9E,KAAtB,EAA6BxE,OAA7B;AACD,KAJM,MAIA;AACL;AACA,WAAKiJ,UAAL,CAAgBjJ,OAAhB;AACD;;AACD,WAAO,IAAP;AACD,GAdM;AAeP;;;;;;AAIO,mBAAA,GAAP;AACE,WAAO;AACLmI,MAAAA,QAAQ,EAAE,KAAKA,QADV;AAEL3D,MAAAA,KAAK,EAAE,KAAKA,KAAL,CAAW4B,GAAX,CAAe,UAAC3B,IAAD;AAAU,eAAAA,IAAI,CAAC8E,SAAL,EAAA;AAAgB,OAAzC,CAFF;AAGL5B,MAAAA,gBAAgB,EAAE,KAAKA,gBAAL,CAAsB4B,SAAtB,EAHb;AAIL1B,MAAAA,YAAY,EAAE,KAAKA,YAAL,CAAkB0B,SAAlB;AAJT,KAAP;AAMD,GAPM;AAQP;;;;;;AAIO,mBAAA,GAAP,UAAiB/I,MAAjB;AAAA,oBAAA;;AACE,QAAMrC,UAAU,GAAG,KAAK6B,OAAL,CAAa7B,UAAhC;AACA,QAAMwJ,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,QAAM6B,cAAc,GAAG7B,gBAAgB,CAAC1B,aAAjB,EAAvB;AACA,QAAMiC,QAAQ,GAAG,KAAKG,WAAL,EAAjB;AAEA,SAAKR,YAAL,CAAkB4B,SAAlB,CAA4BjJ,MAAM,CAACqH,YAAnC;AACAF,IAAAA,gBAAgB,CAAC8B,SAAjB,CAA2BjJ,MAAM,CAACmH,gBAAlC;AACA,SAAKQ,QAAL,GAAgB3H,MAAM,CAAC2H,QAAvB;AACA,SAAK3D,KAAL,GAAahE,MAAM,CAACgE,KAAP,CAAa4B,GAAb,CAAiB,UAAC3B,IAAD,EAAOlC,CAAP;AAAa,aAAA,IAAIwG,QAAJ,CAAa5K,UAAb,wBACtCsG;AACHtC,QAAAA,OAAO,EAAE+F,QAAQ,CAAC3F,CAAD;QAFwB,CAAA;AAGzC,KAHW,CAAb;AAKA,SAAKsF,YAAL,CAAkBV,WAAlB,CAA8B,KAAK3C,KAAnC;;AAEA,QAAIgF,cAAc,KAAK7B,gBAAgB,CAAC1B,aAAjB,EAAvB,EAAyD;AACvD,WAAKkB,WAAL,CAAiB;AACfC,QAAAA,SAAS,EAAE;AADI,OAAjB;AAGD,KAJD,MAIO;AACLnG,MAAAA,MAAM,CAACoG,UAAP,CAAkB;AAChB3C,QAAAA,KAAI,CAACgF,eAAL,CAAqB;AACnBC,UAAAA,OAAO,EAAEjF,KAAI,CAACF,KADK;AAEnBoF,UAAAA,OAAO,EAAE,EAFU;AAGnBC,UAAAA,QAAQ,EAAE;AAHS,SAArB;AAKD,OAND;AAOD;;AACD,WAAO,IAAP;AACD,GA9BM;AA+BP;;;;;;;AAKO,iBAAA,GAAP,UAAe7J,OAAf;;;AAAe,0BAAA,EAAA;AAAAA,MAAAA,YAAA;;;AACb,SAAK2H,gBAAL,CAAsBmC,OAAtB,CAA8B9J,OAA9B;;AAEA,QAAI,CAACA,OAAO,CAACc,UAAb,EAAyB;AACvB,WAAK0D,KAAL,CAAWb,OAAX,CAAmB,UAACI,EAAD;YAAG5B,OAAO;YAAEnB,UAAU;;AACvC,YAAImB,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACtB,KAAR,CAAcE,OAAd,GAAwBC,UAAxB;AACD;AACF,OAJD;AAKD;;AACDC,IAAAA,MAAM,CAAC8I,mBAAP,CAA2B,QAA3B,EAAqC,KAAKC,eAA1C;AACA,UAAA,KAAKC,GAAL,UAAA,iBAAA,SAAA,MAAUH,SAAV;AACD,GAZM;;AAaG,oBAAA,GAAV,UAAqB9J,OAArB;AAAA,oBAAA;;;;AAAqB,0BAAA,EAAA;AAAAA,MAAAA,YAAA;;;;AAEnB,QAAMwE,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAMoF,OAAO,GAAGpF,KAAK,CAAC0B,MAAN,CAAa,UAACzB,IAAD;AAAU,aAAAA,IAAI,CAACtC,OAAL,IAAgBsC,IAAI,CAACiB,WAAL,KAAqBvG,YAAY,CAACyG,OAAlD;AAAyD,KAAhF,CAAhB;AACA,QAAM+D,OAAO,GAAeC,OAAO,CAAC1D,MAAR,CAAe,UAACzB,IAAD;AAAU,aAAAA,IAAI,CAACe,UAAL,KAAoBtG,WAAW,CAACuG,OAAhC;AAAuC,KAAhE,CAA5B;AACA,QAAMyE,WAAW,GAAe,EAAhC;AAEA,UAAA,KAAKD,GAAL,UAAA,iBAAA,SAAA,MAAUH,SAAV;AACA,SAAKG,GAAL,GAAW,IAAIE,OAAJ,CAAY;AACrBC,MAAAA,MAAM,EAAE,KAAKpK,OAAL,CAAavB;AADA,KAAZ,EAER4L,EAFQ,CAEL,iBAFK,EAEc,UAACC,CAAD;AACvB,UAAIA,CAAC,CAACC,UAAN,EAAkB;AAChBX,QAAAA,OAAO,CAACU,CAAC,CAACxB,KAAH,CAAP,CAAiBpD,WAAjB,GAA+BvG,YAAY,CAACqL,YAA5C;AACD;AACF,KANU,EAMRH,EANQ,CAML,UANK,EAMO;AAChB3F,MAAAA,KAAI,CAACmD,YAAL,CAAkByB,WAAlB,CAA8BM,OAA9B;;AACAlF,MAAAA,KAAI,CAAC+F,YAAL,CAAkBd,OAAlB,EAA2BC,OAA3B,EAAoC5J,OAApC;AACD,KATU,EASRqK,EATQ,CASL,cATK,EASW,UAACC,CAAD;AACpB,UAAM7F,IAAI,GAAGmF,OAAO,CAACU,CAAC,CAACxB,KAAH,CAApB;;AACA,UAAIwB,CAAC,CAACC,UAAN,EAAkB;AAChB9F,QAAAA,IAAI,CAACiB,WAAL,GAAmBvG,YAAY,CAACwG,WAAhC;;AAEA,YAAI2E,CAAC,CAACI,cAAN,EAAsB;AACpBhG,UAAAA,KAAI,CAACmD,YAAL,CAAkByB,WAAlB,CAA8B,CAAC7E,IAAD,CAA9B;;AACAC,UAAAA,KAAI,CAAC+F,YAAL,CAAkB,EAAlB,EAAsB,CAAChG,IAAD,CAAtB,EAA8BzE,OAA9B;AACD;AACF;AACF,KAnBU,EAmBRqK,EAnBQ,CAmBL,OAnBK,EAmBI,UAACC,CAAD;AACb,UAAM7F,IAAI,GAAGD,KAAK,CAAC8F,CAAC,CAACxB,KAAH,CAAlB;AACA;;;;;;;;;;;;;;;AAcApE,MAAAA,KAAI,CAACiG,OAAL,CAAa,cAAb,EAA6B;AAC3BxI,QAAAA,OAAO,EAAEmI,CAAC,CAACnI,OADgB;AAE3ByI,QAAAA,MAAM,EAAEN,CAAC,CAACM,MAFiB;AAG3BnG,QAAAA,IAAI,MAHuB;AAI3BoG,QAAAA,MAAM,EAAE;AACNX,UAAAA,WAAW,CAAChG,IAAZ,CAAiBO,IAAjB;AACD;AAN0B,OAA7B;AAQD,KA3CU,EA2CR4F,EA3CQ,CA2CL,OA3CK,EA2CI;AACb,UAAIH,WAAW,CAAC5H,MAAhB,EAAwB;AACtBoC,QAAAA,KAAI,CAAC4E,WAAL,CAAiBY,WAAjB;AACD;AACF,KA/CU,EA+CRY,KA/CQ,CA+CFlB,OAAO,CAACxD,GAAR,CAAY,UAAC3B,IAAD;AAAU,aAAAA,IAAI,CAACtC,OAAL;AAAa,KAAnC,CA/CE,CAAX;AAgDD,GAxDS;;AA0DA,wBAAA,GAAV;AAAA,oBAAA;;AACE,SAAK+G,iBAAL;;AACA,SAAK6B,YAAL,GAAoB9J,MAAM,CAACoG,UAAP,CAAkB;AACpC3C,MAAAA,KAAI,CAACyC,WAAL;AACD,KAFmB,CAApB;AAGD,GALS;;AAMF,cAAA,GAAR;AACE,QAAMgB,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAM6C,YAAY,GAAG7C,QAAQ,CAACrB,KAA9B;AACA,QAAMmE,UAAU,GAAG9C,QAAQ,CAACpB,GAA5B;AACA,QAAMmE,aAAa,GAAGF,YAAY,CAAC1I,MAAb,GAAsB8B,IAAI,CAAC+G,GAAL,MAAA,CAAA/G,IAAA,EAAY4G,YAAZ,CAAtB,GAAkD,CAAxE;AAEA7C,IAAAA,QAAQ,CAACrB,KAAT,GAAiBkE,YAAY,CAAC5E,GAAb,CAAiB,UAACgF,KAAD;AAAW,aAAAA,KAAK,GAAGF,aAAR;AAAqB,KAAjD,CAAjB;AACA/C,IAAAA,QAAQ,CAACpB,GAAT,GAAekE,UAAU,CAAC7E,GAAX,CAAe,UAACgF,KAAD;AAAW,aAAAA,KAAK,GAAGF,aAAR;AAAqB,KAA/C,CAAf;AAEA,SAAK1G,KAAL,CAAWb,OAAX,CAAmB,UAACc,IAAD;AACjB,UAAM9E,UAAU,GAAG8E,IAAI,CAAC4G,aAAxB;;AAEA,UAAI,CAAC1J,QAAQ,CAAChC,UAAD,CAAb,EAA2B;AACzB;AACD;;AACD8E,MAAAA,IAAI,CAAC4G,aAAL,GAAqB1L,UAAU,GAAGuL,aAAlC;AACD,KAPD;AAQD,GAjBO;;AAkBA,sBAAA,GAAR,UAAqBvB,OAArB,EAA0CC,OAA1C,EAA+D5J,OAA/D;AACE,QAAMsL,YAAY,GAAG,KAAKnD,QAA1B;AACA,QAAMoD,SAAS,GAAGvL,OAAO,CAACuL,SAAR,IAAqB,KAAKvL,OAAL,CAAanB,gBAApD;AACA,QAAM2M,WAAW,GAAGxL,OAAO,CAACyL,OAAR,IAAmBH,YAAY,CAACC,SAAS,KAAK,KAAd,GAAsB,OAAtB,GAAgC,KAAjC,CAAnD;AACA,QAAM/G,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAIkH,YAAY,GAAG;AACjB5E,MAAAA,KAAK,iBAAM0E,YADM;AAEjBzE,MAAAA,GAAG,iBAAMyE;AAFQ,KAAnB;;AAIA,QAAIhH,KAAK,CAAClC,MAAV,EAAkB;AAChBoJ,MAAAA,YAAY,GAAG,KAAKC,SAAL,CAAe,KAAKnH,KAApB,EAA2B+G,SAA3B,EAAsCC,WAAtC,CAAf;AACD;;AACD,SAAKI,WAAL,CAAiBF,YAAjB;;AACA,SAAKG,IAAL;;AACA,SAAKhE,YAAL,CAAkBV,WAAlB,CAA8B,KAAK3C,KAAnC;;AACA,SAAKsH,4BAAL;;AACA,SAAKpC,eAAL,CAAqB;AACnBC,MAAAA,OAAO,SADY;AAEnBC,MAAAA,OAAO,SAFY;AAGnBC,MAAAA,QAAQ,EAAE,CAAC,CAAC7J,OAAO,CAACoH;AAHD,KAArB;AAKD,GArBO;;AAsBA,yBAAA,GAAR,UAAwBkD,CAAxB;AACE;;;;;;;;;;;;;AAaA,SAAKK,OAAL,CAAa,gBAAb,EAA+BL,CAA/B;AACD,GAfO;;AAgBA,2BAAA,GAAR;AACEtD,IAAAA,YAAY,CAAC,KAAK+D,YAAN,CAAZ;AACA,SAAKA,YAAL,GAAoB,CAApB;AACD,GAHO;;AAIA,sCAAA,GAAR;AACQ,QAAAhH,KAGD,KAAKoE,QAHJ;AAAA,QACG6C,YAAY,WADf;AAAA,QAECC,UAAU,SAFX;AAIN,QAAMzM,GAAG,GAAG,KAAKwB,OAAL,CAAaxB,GAAzB;AAEA,QAAMuN,QAAQ,GAAGd,UAAU,CAAC3I,MAAX,GAAoB8B,IAAI,CAACC,GAAL,MAAA,CAAAD,IAAA,EAAY6G,UAAZ,CAApB,GAA6C,CAA9D;AACA,QAAMe,UAAU,GAAGhB,YAAY,CAAC1I,MAAb,GAAsB8B,IAAI,CAACC,GAAL,MAAA,CAAAD,IAAA,EAAY4G,YAAZ,CAAtB,GAAkD,CAArE;AACA,QAAMnL,WAAW,GAAGuE,IAAI,CAACC,GAAL,CAAS2H,UAAT,EAAqBD,QAAQ,GAAGvN,GAAhC,CAApB;AAEA,SAAKmJ,gBAAL,CAAsBlH,cAAtB,CAAqCZ,WAArC;AACD,GAZO;;AAaA,0BAAA,GAAR;AACE,SAAK8H,gBAAL,CAAsBsE,MAAtB;AACA,SAAKpE,YAAL,CAAkBqE,gBAAlB,CAAmC,KAAKvE,gBAAL,CAAsBwE,OAAtB,EAAnC;AACD,GAHO;;AA+BA,eAAA,GAAR;AACE,SAAK9C,gBAAL;;AACA,QAAI,KAAKrJ,OAAL,CAAapB,UAAjB,EAA6B;AAC3BqC,MAAAA,MAAM,CAACmL,gBAAP,CAAwB,QAAxB,EAAkC,KAAKpC,eAAvC;AACD;AACF,GALO;;;AArZMjC,EAAAA,mBAAA,GAAwC7J,oBAAxC;AACA6J,EAAAA,kBAAA,GAAgB3I,mBAAhB;AAJD2I,EAAAA,IAAI,wBADlBnF,eACcmF,KAAA;AA8Zf,aAAA;AAAC,EA5ZWsE,UAFZ;AAoaA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;AC/aA;;;;;;;;;AASA;;;AAAiC1F,EAAAA,8BAAA;;AAAjC,sBAAA;AAAA,wEAAA;;AAgBUjC,IAAAA,iBAAA,GAAc,CAAd;AACAA,IAAAA,aAAA,GAAU,CAAV;;AA2LT;;;;AAzLQ,mBAAA,GAAP,UAAiBF,KAAjB,EAAoC+G,SAApC,EAAgEE,OAAhE;AACE,SAAKa,oBAAL,CAA0B9H,KAA1B;;AACA,SAAK+H,gBAAL,CAAsB/H,KAAtB;;AAEA,QAAMgI,MAAM,GAAG,KAAKC,OAApB;AACA,QAAMC,UAAU,GAAG,KAAKC,WAAxB;AACM,QAAA5I,KAIF,KAAK/D,OAJH;AAAA,QACJxB,GAAG,SADC;AAAA,QAEJoO,KAAK,WAFD;AAAA,QAGJC,eAAe,qBAHX;AAKN,QAAMC,aAAa,GAAGrB,OAAO,CAACnJ,MAA9B;AACA,QAAMyK,WAAW,GAAGvI,KAAK,CAAClC,MAA1B;;AACA,QAAM0K,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,QAAMC,cAAc,GAAG3B,SAAS,KAAK,KAArC;AACA,QAAM4B,kBAAkB,GAAGD,cAAc,GAAG,KAAH,GAAW,KAApD;AACA,QAAME,kBAAkB,GAAGF,cAAc,GAAG,SAAH,GAAe,aAAxD;AACA,QAAIlC,YAAY,GAAG,CAAC,CAAD,CAAnB;;AAEA,QAAI8B,aAAa,KAAKN,MAAtB,EAA8B;AAC5BxB,MAAAA,YAAY,GAAGS,OAAO,CAACzD,KAAR,EAAf;AACD,KAFD,MAEO;AACL,UAAMqF,OAAK,GAAGP,aAAa,GAAG1I,IAAI,CAAC+I,kBAAD,CAAJ,MAAA,CAAA/I,IAAA,EAA4BqH,OAA5B,CAAH,GAA0C,CAArE;AAEAT,MAAAA,YAAY,GAAGhH,KAAK,CAACwI,MAAD,CAAL,CAAcpG,GAAd,CAAkB;AAAM,eAAAiH,OAAA;AAAK,OAA7B,CAAf;AACD;;AACD,QAAMpC,UAAU,GAAGD,YAAY,CAAChD,KAAb,EAAnB;AACA,QAAMsF,UAAU,GAAGd,MAAM,GAAG,CAAT,GAAaQ,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAvC,GAA6C,CAAhE;AACA,QAAMO,SAAS,GAAGX,KAAK,KAAK,SAA5B;;4BAESrK;AACP,UAAM6I,KAAK,GAAGhH,IAAI,CAAC+I,kBAAD,CAAJ,MAAA,CAAA/I,IAAA,EAA4B6G,UAA5B,KAA2C,CAAzD;AACA,UAAIuC,WAAW,GAAGvC,UAAU,CAACmC,kBAAD,CAAV,CAA+BhC,KAA/B,CAAlB;AACA,UAAM3G,IAAI,GAAGD,KAAK,CAAC0I,cAAc,GAAG3K,CAAH,GAAOwK,WAAW,GAAG,CAAd,GAAkBxK,CAAxC,CAAlB;AACA,UAAMkL,eAAe,GAAGC,QAAQ,CAACjJ,IAAI,CAACpC,UAAL,CAAgBmK,MAAhB,IAA0B,GAA3B,EAAgC,EAAhC,CAAhC;AACA,UAAI5M,UAAU,GAAG6E,IAAI,CAAC7E,UAAtB;AACA,UAAIC,WAAW,GAAG4E,IAAI,CAAC5E,WAAvB;AACA,UAAM8N,SAAS,GAAGvJ,IAAI,CAAC+G,GAAL,CAASqB,MAAT,EAAiBkB,QAAQ,CAACjJ,IAAI,CAACpC,UAAL,CAAgBsL,SAAhB,IAA6B,GAA9B,EAAmC,EAAnC,CAAzB,CAAlB;AACA,UAAIC,UAAU,GAAGxJ,IAAI,CAAC+G,GAAL,CAASqB,MAAT,EAAiBiB,eAAe,IAAIrJ,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACyJ,IAAL,CAAU,CAACjO,UAAU,GAAGpB,GAAd,IAAqB8O,UAA/B,CAAZ,CAApC,CAAjB;;AAEA,UAAIE,WAAW,KAAK,CAAC,CAArB,EAAwB;AACtBA,QAAAA,WAAW,GAAG,CAAd;AACD;;AACD,UAAIhB,MAAM,GAAG,CAAT,IAAcoB,UAAU,GAAG,CAA/B,EAAkC;AAChC,YAAIV,cAAJ,EAAoB;AAClB;AACAM,UAAAA,WAAW,GAAGpJ,IAAI,CAAC+G,GAAL,CAASqC,WAAT,EAAsBpJ,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYmI,MAAM,GAAGoB,UAArB,CAAtB,CAAd;AACD,SAHD,MAGO;AACL;AACAJ,UAAAA,WAAW,GAAGpJ,IAAI,CAACC,GAAL,CAASmJ,WAAT,EAAsBpJ,IAAI,CAAC+G,GAAL,CAASqB,MAAM,GAAG,CAAlB,EAAqBoB,UAArB,CAAtB,CAAd;AACD;AACF;;AACD,UAAIH,eAAe,GAAG,CAAtB,EAAyB;AACvB,YAAMK,cAAc,GAAGN,WAAW,IAAIN,cAAc,GAAGU,UAAH,GAAgB,CAACA,UAAnC,CAAlC;AACA,YAAMG,aAAa,GAAGtC,OAAO,CAACzD,KAAR,CACpB5D,IAAI,CAAC+G,GAAL,CAASqC,WAAT,EAAsBM,cAAtB,CADoB,EACmB1J,IAAI,CAACC,GAAL,CAASmJ,WAAT,EAAsBM,cAAtB,CADnB,CAAtB;AAEA,YAAME,WAAW,GAAGd,cAAc,GAAG9I,IAAI,CAACC,GAAL,MAAA,CAAAD,IAAA,EAAY2J,aAAZ,CAAH,GAAgC3J,IAAI,CAAC+G,GAAL,MAAA,CAAA/G,IAAA,EAAY2J,aAAZ,CAAlE;;AAEA,eAAOH,UAAU,GAAGD,SAApB,EAA+B;AAC7B,cAAMM,kBAAkB,GAAGT,WAAW,IAAIN,cAAc,GAAGU,UAAU,GAAG,CAAhB,GAAoB,CAACA,UAAD,GAAc,CAApD,CAAtC;;AAEA,cAAIK,kBAAkB,GAAG,CAArB,IAA0BA,kBAAkB,GAAGzB,MAAnD,EAA2D;AACzD;AACD;;AACD,cACGU,cAAc,IAAIzB,OAAO,CAACwC,kBAAkB,GAAG,CAAtB,CAAP,GAAkCD,WAArD,IACI,CAACd,cAAD,IAAmBzB,OAAO,CAACwC,kBAAD,CAAP,GAA8BD,WAFvD,EAGE;AACA;AACD;;AACD,YAAEJ,UAAF;AACD;;AACD,YAAIA,UAAU,GAAG,CAAb,IAAkBL,SAAtB,EAAiC;AAC/B3N,UAAAA,UAAU,GAAG,CAACgO,UAAU,GAAG,CAAd,IAAmBN,UAAnB,GAAgCZ,UAA7C;AACAjI,UAAAA,IAAI,CAACyJ,aAAL,GAAqBtO,UAArB;AACD;;AACD,YAAIiN,eAAe,GAAG,CAAtB,EAAyB;AACvBhN,UAAAA,WAAW,GAAGD,UAAU,GAAGiN,eAA3B;AACApI,UAAAA,IAAI,CAAC0J,cAAL,GAAsBtO,WAAtB;AACD;AACF;;AACD,UAAMH,SAAS,GAAGsN,UAAU,CAACQ,WAAD,CAA5B;AACA,UAAM7N,UAAU,GAAGuN,cAAc,GAAG9B,KAAH,GAAWA,KAAK,GAAG5M,GAAR,GAAcqB,WAA1D;AACA,UAAMuO,aAAa,GAAGzO,UAAU,GAAGE,WAAb,GAA2BrB,GAAjD;AAEAiG,MAAAA,IAAI,CAAC4J,YAAL,GAAoB3O,SAApB;AACA+E,MAAAA,IAAI,CAAC4G,aAAL,GAAqB1L,UAArB;AACA,UAAMoM,QAAQ,GAAGmB,cAAc,GAAGkB,aAAH,GAAmBzO,UAAlD;AAEAqE,MAAAA,KAAK,CAAC4J,UAAD,CAAL,CAAkBjK,OAAlB,CAA0B,UAAC2K,WAAD;AACxBrD,QAAAA,UAAU,CAACuC,WAAW,IAAIN,cAAc,GAAGoB,WAAH,GAAiB,CAACA,WAApC,CAAZ,CAAV,GAA0EvC,QAA1E;AACD,OAFD;;;AA3DF,SAAK,IAAIxJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwK,WAApB,EAAiC,EAAExK,CAAnC;cAASA;AA8DR;AAGD;;;AACA,WAAO;AACLuE,MAAAA,KAAK,EAAEoG,cAAc,GAAGlC,YAAH,GAAkBC,UADlC;AAELlE,MAAAA,GAAG,EAAEmG,cAAc,GAAGjC,UAAH,GAAgBD;AAF9B,KAAP;AAID,GApGM;;AAqGC,8BAAA,GAAR,UAA6BxG,KAA7B;AACQ,QAAAT,KAIF,KAAK/D,OAJH;AAAA,QACQuO,gBAAgB,gBADxB;AAAA,QAEJ/P,GAAG,SAFC;AAAA,QAGJoO,KAAK,WAHD;;AAMN,QAAIA,KAAK,KAAK,SAAd,EAAyB;AACvB,UAAIJ,MAAM,GAAG,KAAKA,MAAlB;;AAEA,UAAI+B,gBAAJ,EAAsB;AACpB/B,QAAAA,MAAM,GAAGpI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACoK,KAAL,CAAW,CAAC,KAAKC,sBAAL,KAAgCjQ,GAAjC,KAAyC+P,gBAAgB,GAAG/P,GAA5D,CAAX,CAAZ,CAAT;AACD;;AACD,WAAKmO,WAAL,GAAmB,CAAC,KAAK8B,sBAAL,KAAgCjQ,GAAjC,KAAyCgO,MAAM,IAAI,CAAnD,IAAwDhO,GAA3E;AACD,KAPD,MAOO,IAAI+P,gBAAJ,EAAsB;AAC3B,WAAK5B,WAAL,GAAmB4B,gBAAnB;AACD,KAFM,MAEA;AACL,WAAmB,UAAA,EAAAG,eAAnB,EAAmB9K,mBAAnB,EAAmBA,IAAnB,EAA0B;AAArB,YAAMa,IAAI,cAAV;AACH,YAAMpC,UAAU,GAAGoC,IAAI,CAACpC,UAAxB;;AACA,YAAIoC,IAAI,CAACiB,WAAL,KAAqBvG,YAAY,CAACyG,OAAlC,IAA6C,CAACnB,IAAI,CAAClE,IAAnD,IAA2D8B,UAAU,CAACmK,MAAtE,IAAgFnK,UAAU,CAACsL,SAA/F,EAA0G;AACxG;AACD;;AACD,YAAM/N,UAAU,GAAG6E,IAAI,CAAC7E,UAAxB;AAEA,aAAK+M,WAAL,GAAmB/M,UAAnB;AACA,eAAOA,UAAP;AACD;;AACD,WAAK+M,WAAL,GAAmB,KAAKA,WAAL,IAAoB,CAAvC;AACD;;AACD,WAAO,KAAKA,WAAZ;AACD,GA9BO;;AA+BA,0BAAA,GAAR,UAAyBnI,KAAzB;AACQ,QAAAT,KAGF,KAAK/D,OAHH;AAAA,QACJxB,GAAG,SADC;AAAA,QAEImQ,YAAY,YAFhB;AAIN,QAAMjC,UAAU,GAAG,KAAKC,WAAxB;AACA,QAAIH,MAAM,GAAG,CAAb;;AAEA,QAAImC,YAAJ,EAAkB;AAChBnC,MAAAA,MAAM,GAAGmC,YAAT;AACD,KAFD,MAEO,IAAI,CAACjC,UAAL,EAAiB;AACtBF,MAAAA,MAAM,GAAG,CAAT;AACD,KAFM,MAEA;AACLA,MAAAA,MAAM,GAAGpI,IAAI,CAAC+G,GAAL,CACP3G,KAAK,CAAClC,MADC,EAEP8B,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACoK,KAAL,CAAW,CAAC,KAAKC,sBAAL,KAAgCjQ,GAAjC,KAAyCkO,UAAU,GAAGlO,GAAtD,CAAX,CAAZ,CAFO,CAAT;AAID;;AACD,SAAKiO,OAAL,GAAeD,MAAf;AACA,WAAOA,MAAP;AACD,GApBO;;AAqBA,wBAAA,GAAR;AACE,QAAME,UAAU,GAAG,KAAKC,WAAxB;AACA,QAAMH,MAAM,GAAG,KAAKC,OAApB;AACM,QAAA1I,KAGF,KAAK/D,OAHH;AAAA,QACJ4M,KAAK,WADD;AAAA,QAEJpO,GAAG,SAFC;AAIN,QAAMoQ,aAAa,GAAG,KAAKH,sBAAL,EAAtB;AACA,QAAMI,OAAO,GAAG7K,KAAK,CAACwI,MAAD,CAArB;AAEA,QAAIsC,MAAM,GAAG,CAAb;AACA,QAAIC,IAAI,GAAG,CAAX;;AAEA,QAAInC,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,SAArC,EAAgD;AAC9C,UAAMoC,SAAS,GAAGxC,MAAM,GAAG,CAA3B;AAEAuC,MAAAA,IAAI,GAAGC,SAAS,GAAG5K,IAAI,CAACC,GAAL,CAAS,CAACuK,aAAa,GAAGlC,UAAjB,IAA+BsC,SAAxC,EAAmDtC,UAAU,GAAGlO,GAAhE,CAAH,GAA0E,CAA1F;AACAsQ,MAAAA,MAAM,GAAG1K,IAAI,CAAC+G,GAAL,CAAS,CAAT,EAAYyD,aAAa,GAAG,CAAhB,GAAoB,CAACI,SAAS,GAAGD,IAAZ,GAAmBrC,UAApB,IAAkC,CAAlE,CAAT;AACD,KALD,MAKO;AACLqC,MAAAA,IAAI,GAAGrC,UAAU,GAAGlO,GAApB;AACA,UAAMyQ,eAAe,GAAG,CAACzC,MAAM,GAAG,CAAV,IAAeuC,IAAf,GAAsBrC,UAA9C;;AAEA,UAAIE,KAAK,KAAK,QAAd,EAAwB;AACtBkC,QAAAA,MAAM,GAAG,CAACF,aAAa,GAAGK,eAAjB,IAAoC,CAA7C;AACD,OAFD,MAEO,IAAIrC,KAAK,KAAK,KAAd,EAAqB;AAC1BkC,QAAAA,MAAM,GAAGF,aAAa,GAAGK,eAAzB;AACD;AACF;;AACD,WAAOJ,OAAO,CAACzI,GAAR,CAAY,UAAC7D,CAAD;AACjB,aAAOuM,MAAM,GAAGvM,CAAC,GAAGwM,IAApB;AACD,KAFM,CAAP;AAGD,GA/BO;;AA3KMG,EAAAA,yBAAA,yBACTnH,IAAI,CAAChF;AACRyJ,IAAAA,MAAM,EAAEvN,aAAa,CAACI;AACtBqN,IAAAA,UAAU,EAAEzN,aAAa,CAACI;AAC1BwN,IAAAA,eAAe,EAAE5N,aAAa,CAACI;AAC/BuN,IAAAA,KAAK,EAAE3N,aAAa,CAACI;IALT;AAOA6P,EAAAA,0BAAA,yBACTnH,IAAI,CAACP;AACRoF,IAAAA,KAAK,EAAE;AACPJ,IAAAA,MAAM,EAAE;AACRE,IAAAA,UAAU,EAAE;AACZG,IAAAA,eAAe,EAAE;IALL;AARHqC,EAAAA,WAAW,eADvBtM,eACYsM,YAAA;AA4Mb,oBAAA;AAAC,EA5MgCnH,KAAjC;AAkNA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;AClSA;;AACA;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASoH,4BAAT,CACCC,KADD,EAECC,CAFD,EAGCC,CAHD;AAKC;AACA;AACA,MAAMC,YAAY,GAA8B,EAAhD;AAEA;;AACA,MAAMC,KAAK,GAA8B,EAAzC;AACAA,EAAAA,KAAK,CAACH,CAAD,CAAL,GAAW,CAAX;AAGA;AACA;AACA;;AACA,MAAMI,IAAI,GAAG,IAAIC,UAAJ,CAAgD,UAAAC,CAAA;AAAK,WAAAA,CAAC,CAACC,IAAF;AAAM,GAA3D,CAAb;AACAH,EAAAA,IAAI,CAACvL,IAAL,CAAU;AAAExB,IAAAA,KAAK,EAAE2M,CAAT;AAAYO,IAAAA,IAAI,EAAE;AAAlB,GAAV;AAEA,MAAIC,OAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,6BAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,WAAJ;;AAEA,SAAOX,IAAI,CAAC9O,IAAL,EAAP,EAAoB;AACnB;AACA;AACAkP,IAAAA,OAAO,GAAGJ,IAAI,CAACY,GAAL,EAAV;AACAP,IAAAA,CAAC,GAAGD,OAAO,CAACnN,KAAZ;AACAqN,IAAAA,cAAc,GAAGF,OAAO,CAACD,IAAzB,CALmB;;AAQnBI,IAAAA,cAAc,GAAGZ,KAAK,CAACU,CAAD,CAAL,IAAY,EAA7B,CARmB;AAWnB;AACA;;AACA,SAAK,IAAMQ,CAAX,IAAgBN,cAAhB,EAAgC;AAC/B;AACAC,MAAAA,SAAS,GAAGD,cAAc,CAACM,CAAD,CAA1B,CAF+B;AAK/B;AACA;;AACAJ,MAAAA,6BAA6B,GAAGH,cAAc,GAAGE,SAAjD,CAP+B;AAU/B;AACA;AACA;;AACAE,MAAAA,cAAc,GAAGX,KAAK,CAACc,CAAD,CAAtB;AACAF,MAAAA,WAAW,GAAI,OAAOZ,KAAK,CAACc,CAAD,CAAZ,KAAoB,WAAnC;;AACA,UAAIF,WAAW,IAAID,cAAc,GAAGD,6BAApC,EAAmE;AAClEV,QAAAA,KAAK,CAACc,CAAD,CAAL,GAAWJ,6BAAX;AACAT,QAAAA,IAAI,CAACvL,IAAL,CAAU;AAAExB,UAAAA,KAAK,EAAE4N,CAAT;AAAYV,UAAAA,IAAI,EAAEM;AAAlB,SAAV;AACAX,QAAAA,YAAY,CAACe,CAAD,CAAZ,GAAkBR,CAAlB;AACA;AACD;AACD;;AAED,MAAI,OAAON,KAAK,CAACF,CAAD,CAAZ,KAAoB,WAAxB,EAAqC;AACpC,QAAMiB,GAAG,GAAG,CAAC,6BAAD,EAAgClB,CAAhC,EAAmC,MAAnC,EAA2CC,CAA3C,EAA8C,GAA9C,EAAmDjJ,IAAnD,CAAwD,EAAxD,CAAZ;AACA,UAAM,IAAImK,KAAJ,CAAUD,GAAV,CAAN;AACA;;AAED,SAAOhB,YAAP;AACA;;AACD,SAASkB,2CAAT,CACClB,YADD,EAECD,CAFD;AAIC,MAAMoB,KAAK,GAAa,EAAxB;AACA,MAAIZ,CAAC,GAAGR,CAAR;;AAEA,SAAOQ,CAAP,EAAU;AACTY,IAAAA,KAAK,CAACxM,IAAN,CAAW4L,CAAX;AACAA,IAAAA,CAAC,GAAGP,YAAY,CAACO,CAAD,CAAhB;AACA;;AACDY,EAAAA,KAAK,CAACC,OAAN;AACA,SAAOD,KAAP;AACA;;AACD,SAASE,SAAT,CACCxB,KADD,EAECC,CAFD,EAGCC,CAHD;AAKC,MAAMC,YAAY,GAAGJ,4BAA4B,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,CAAjD;AAEA,SAAOmB,2CAA2C,CAAClB,YAAD,EAAeD,CAAf,CAAlD;AACA;;AAED;;;AAIC,qBAAA,CAAYuB,aAAZ;AACC,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACA;;;;AACM,cAAA,GAAP,UAAY1O,OAAZ;AACC;AACA,SAAK2O,OAAL,CAAa5M,IAAb,CAAkB/B,OAAlB;;AAEA,SAAK4O,QAAL,CAAc,KAAKD,OAAL,CAAaxO,MAAb,GAAsB,CAApC;AACA,GALM;;AAMA,aAAA,GAAP;AACC;AACA,QAAMwB,MAAM,GAAG,KAAKgN,OAAL,CAAa,CAAb,CAAf;;AAEA,QAAM/J,GAAG,GAAG,KAAK+J,OAAL,CAAaT,GAAb,EAAZ;AAEA;;AACA,QAAI,KAAKS,OAAL,CAAaxO,MAAb,GAAsB,CAA1B,EAA6B;AAC5B,WAAKwO,OAAL,CAAa,CAAb,IAAkB/J,GAAlB;AACA,WAAKiK,QAAL,CAAc,CAAd;AACA;;AACD,WAAOlN,MAAP;AACA,GAZM;;AAaA,cAAA,GAAP;AACC,WAAO,KAAKgN,OAAL,CAAaxO,MAApB;AACA,GAFM;;AAGA,kBAAA,GAAP,UAAgB2O,EAAhB;AACC,QAAIC,CAAC,GAAGD,EAAR;;AAEA,QAAM9O,OAAO,GAAG,KAAK2O,OAAL,CAAaI,CAAb,CAAhB;;AAEA,WAAOA,CAAC,GAAG,CAAX,EAAc;AACb;AACA,UAAMC,OAAO,GAAG/M,IAAI,CAACoK,KAAL,CAAW,CAAC0C,CAAC,GAAG,CAAL,IAAU,CAArB,IAA0B,CAA1C;AACA,UAAME,MAAM,GAAG,KAAKN,OAAL,CAAaK,OAAb,CAAf,CAHa;;AAMb,UAAI,KAAKN,aAAL,CAAmB1O,OAAnB,IAA8B,KAAK0O,aAAL,CAAmBO,MAAnB,CAAlC,EAA8D;AAC7D,aAAKN,OAAL,CAAaK,OAAb,IAAwBhP,OAAxB;AACA,aAAK2O,OAAL,CAAaI,CAAb,IAAkBE,MAAlB,CAF6D;;AAI7DF,QAAAA,CAAC,GAAGC,OAAJ;AACA,OALD,MAKO;AACN;AACA;AACA;AACD;AACD,GArBM;;AAsBA,kBAAA,GAAP,UAAgBD,CAAhB;AACC;AACA,QAAM5O,MAAM,GAAG,KAAKwO,OAAL,CAAaxO,MAA5B;AACA,QAAMH,OAAO,GAAG,KAAK2O,OAAL,CAAaI,CAAb,CAAhB;AACA,QAAMG,SAAS,GAAG,KAAKR,aAAL,CAAmB1O,OAAnB,CAAlB;AACA,QAAImP,WAAJ;;AAEA,WAAO,IAAP,EAAa;AACZ;AACA,UAAMC,OAAO,GAAG,CAACL,CAAC,GAAG,CAAL,IAAU,CAA1B;AACA,UAAMM,OAAO,GAAGD,OAAO,GAAG,CAA1B,CAHY;AAKZ;;AACA,UAAIE,IAAI,GAAkB,IAA1B,CANY;;AAQZ,UAAID,OAAO,GAAGlP,MAAd,EAAsB;AACrB;AACA,YAAMoP,MAAM,GAAG,KAAKZ,OAAL,CAAaU,OAAb,CAAf;AACAF,QAAAA,WAAW,GAAG,KAAKT,aAAL,CAAmBa,MAAnB,CAAd,CAHqB;;AAKrB,YAAIJ,WAAW,GAAGD,SAAlB,EAA6B;AAC5BI,UAAAA,IAAI,GAAGD,OAAP;AACA;AACD,OAhBW;;;AAkBZ,UAAID,OAAO,GAAGjP,MAAd,EAAsB;AACrB,YAAMqP,MAAM,GAAG,KAAKb,OAAL,CAAaS,OAAb,CAAf;AACA,YAAMK,WAAW,GAAG,KAAKf,aAAL,CAAmBc,MAAnB,CAApB;;AAEA,YAAIC,WAAW,IAAIH,IAAI,IAAI,IAAR,GAAeJ,SAAf,GAA2BC,WAA/B,CAAf,EAA4D;AAC3DG,UAAAA,IAAI,GAAGF,OAAP;AACA;AACD,OAzBW;;;AA4BZ,UAAIE,IAAI,KAAK,IAAb,EAAmB;AAClB,aAAKX,OAAL,CAAaI,CAAb,IAAkB,KAAKJ,OAAL,CAAaW,IAAb,CAAlB;AACA,aAAKX,OAAL,CAAaW,IAAb,IAAqBtP,OAArB;AACA+O,QAAAA,CAAC,GAAGO,IAAJ;AACA,OAJD,MAIO;AACN;AACA;AACA;AACD;AACD,GA5CM;;AA6CR,mBAAA;AAAC,GAjGD;;ACxFA;;;;;;;;AAQA;;;AAAmC9K,EAAAA,gCAAA;;AAAnC,wBAAA;;AAgQC;;;;AAlPQ,mBAAA,GAAP,UAAiBnC,KAAjB,EAAoC+G,SAApC,EAAgEE,OAAhE;AACE,QAAMoG,QAAQ,GAAG,KAAK7R,OAAL,CAAa6R,QAA9B;AACA,QAAIC,IAAI,GAAa,EAArB;;AAEA,QAAItN,KAAK,CAAClC,MAAV,EAAkB;AAChBwP,MAAAA,IAAI,GAAGD,QAAQ,GAAG,KAAKE,WAAL,CAAiBvN,KAAjB,CAAH,GAA6B,KAAKwN,QAAL,CAAcxN,KAAd,CAA5C;AACD;;AACD,WAAO,KAAKyN,SAAL,CAAezN,KAAf,EAAsBsN,IAAtB,EAA4BrG,OAA5B,EAAqCF,SAAS,KAAK,KAAnD,CAAP;AACD,GARM;;AASC,qBAAA,GAAR,UAAoB/G,KAApB;;;AACQ,QAAAuB,KAGF,KAAK/F,OAHH;AAAA,QACSkS,iBAAiB,iBAD1B;AAAA,QAEMC,cAAc,cAFpB;AAIN,QAAMC,WAAW,GAAG1Q,QAAQ,CAACwQ,iBAAD,CAAR,GAA8BA,iBAA9B,GAAkD,CAACA,iBAAD,EAAoBA,iBAApB,CAAtE;AACA,QAAML,QAAQ,GAAanQ,QAAQ,CAACyQ,cAAD,CAAR,GAA2BA,cAA3B,GAA4C,CAACA,cAAD,EAAiBA,cAAjB,CAAvE;;AACA,QAAME,QAAQ,GAAG,KAAKC,WAAL,CAAiB9N,KAAjB,EAAwB;AACvCsN,MAAAA,IAAI,EAAE,CAAC,CAAD,CADiC;AAEvClC,MAAAA,IAAI,EAAE,CAFiC;AAGvCtN,MAAAA,MAAM,EAAE,CAH+B;AAIvCiQ,MAAAA,WAAW,EAAE;AAJ0B,KAAxB,EAKdH,WALc,EAKDP,QALC,CAAjB;;AAOA,iBAAOQ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,SAAA,GAAAA,QAAQ,CAAEP,IAAV,CAAe1L,GAAf,CAAmB,UAACoM,IAAD;AAAU,aAAA,KAAGA,IAAH;AAAS,KAAtC,oCAA2C,EAAlD;AACD,GAfO;;AAgBA,qBAAA,GAAR,UACEhO,KADF,EAEEiO,WAFF,EAGEL,WAHF,EAIEP,QAJF;AAMS,QAAAa,SAAS,GAAIN,WAAW,EAAA,CAAxB;AACA,QAAAO,MAAM,GAAYd,QAAQ,EAAA,CAA1B;AAAA,QAAQe,MAAM,GAAIf,QAAQ,EAAA,CAA1B;AACP,QAAMgB,QAAQ,GAAGrO,KAAK,CAAClC,MAAvB;AAEE,QAAAwP,IAAI,GAIFW,WAAW,KAJb;AAAA,QACQK,UAAU,GAGhBL,WAAW,OAJb;AAAA,QAEA7C,IAAI,GAEF6C,WAAW,KAJb;AAAA,QAGAF,WAAW,GACTE,WAAW,YAJb;;AAOF,QAAIF,WAAW,GAAGM,QAAd,KAA2BD,MAAM,IAAIE,UAAV,IAAwBP,WAAW,GAAGG,SAAd,GAA0BG,QAA7E,CAAJ,EAA4F;AAC1F,UAAME,SAAS,GAAG5O,YAAY,CAAC0O,QAAQ,GAAGN,WAAZ,EAAyBH,WAAzB,CAA9B;AACA,UAAMY,QAAQ,GAAGD,SAAS,GAAG3O,IAAI,CAAC6O,GAAL,CAAS,KAAKC,QAAL,CAAc1O,KAAd,EAAqB+N,WAArB,EAAkCM,QAAlC,CAAT,CAA7B;AAEA,mCACKJ;AACHnQ,QAAAA,MAAM,EAAEwQ,UAAU,GAAG;AACrBhB,QAAAA,IAAI,iBAAMA,OAAMe;AAChBN,QAAAA,WAAW,EAAEM;AACbjD,QAAAA,IAAI,EAAEA,IAAI,GAAGoD;AACbG,QAAAA,MAAM,EAAE;QANV;AAQD,KAZD,MAYO,IAAIZ,WAAW,IAAIM,QAAnB,EAA6B;AAClC,mCACKJ;AACHF,QAAAA,WAAW,EAAEM;AACbM,QAAAA,MAAM,EAAER,MAAM,GAAGG,UAAT,IAAuBF,MAAM,GAAGE;QAH1C;AAKD,KANM,MAMA;AACL,aAAO,KAAKM,cAAL,CAAoB5O,KAApB,EAA2BiO,WAA3B,EAAwCI,QAAxC,EAAkDT,WAAlD,EAA+DP,QAA/D,CAAP;AACD;AAEF,GAvCO;;AAwCA,wBAAA,GAAR,UACErN,KADF,EAEEiO,WAFF,EAGEI,QAHF,EAIET,WAJF,EAKEP,QALF;AAOS,QAAAa,SAAS,GAAeN,WAAW,EAAA,CAAnC;AAAA,QAAWzE,SAAS,GAAIyE,WAAW,EAAA,CAAnC;AAEL,QAAAG,WAAW,GAITE,WAAW,YAJb;AAAA,QACAX,IAAI,GAGFW,WAAW,KAJb;AAAA,QAEQK,UAAU,GAEhBL,WAAW,OAJb;AAAA,QAGA7C,IAAI,GACF6C,WAAW,KAJb;AAKF,QAAMnQ,MAAM,GAAG8B,IAAI,CAAC+G,GAAL,CAAS0H,QAAT,EAAmBN,WAAW,GAAG5E,SAAjC,CAAf;AACA,QAAM0F,KAAK,GAAW,EAAtB;;AAEA,SAAK,IAAIC,QAAQ,GAAGf,WAAW,GAAGG,SAAlC,EAA6CY,QAAQ,IAAIhR,MAAzD,EAAiE,EAAEgR,QAAnE,EAA6E;AAC3E,UAAIA,QAAQ,KAAKf,WAAjB,EAA8B;AAC5B;AACD;;AACD,UAAMgB,QAAQ,GAAGnP,IAAI,CAAC6O,GAAL,CAAS,KAAKC,QAAL,CAAc1O,KAAd,EAAqB+N,WAArB,EAAkCe,QAAlC,CAAT,CAAjB;;AACA,UAAME,QAAQ,GAAG,KAAKlB,WAAL,CAAiB9N,KAAjB,EAAwB;AACvCsN,QAAAA,IAAI,iBAAMA,OAAMwB,UADuB;AAEvChR,QAAAA,MAAM,EAAEwQ,UAAU,GAAG,CAFkB;AAGvClD,QAAAA,IAAI,EAAEA,IAAI,GAAG2D,QAH0B;AAIvChB,QAAAA,WAAW,EAAEe;AAJ0B,OAAxB,EAKdlB,WALc,EAKDP,QALC,CAAjB;;AAOA,UAAI2B,QAAJ,EAAc;AACZH,QAAAA,KAAK,CAACnP,IAAN,CAAWsP,QAAX;AACD;AACF;;AACDH,IAAAA,KAAK,CAACI,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ;AACT,UAAMC,OAAO,GAAGF,CAAC,CAACP,MAAlB;AACA,UAAMU,OAAO,GAAGF,CAAC,CAACR,MAAlB;;AAEA,UAAIS,OAAO,KAAKC,OAAhB,EAAyB;AACvB;AACA,eAAOD,OAAO,GAAG,CAAH,GAAO,CAAC,CAAtB;AACD;;AACD,UAAME,UAAU,GAAG3P,YAAY,CAACuP,CAAC,CAACpR,MAAH,EAAWuP,QAAX,CAA/B;AACA,UAAMkC,UAAU,GAAG5P,YAAY,CAACwP,CAAC,CAACrR,MAAH,EAAWuP,QAAX,CAA/B;AAEA,aAAOiC,UAAU,GAAGC,UAAb,IAA2BL,CAAC,CAAC9D,IAAF,GAAS+D,CAAC,CAAC/D,IAA7C;AACD,KAZD;;AAeA,WAAOyD,KAAK,CAAC,CAAD,CAAZ;AACD,GAjDO;;AAkDA,kBAAA,GAAR,UAAiB7O,KAAjB;AAEI,QAAAhG,GAAG,GACD,KAAKwB,OAAL,IADF;AAEF,QAAMW,IAAI,GAAG6D,KAAK,CAACwP,MAAN,CAAa,UAACC,GAAD,EAAMxP,IAAN;AACxB,UAAM7E,UAAU,GAAG6E,IAAI,CAACyP,aAAxB;AACA,UAAMrU,WAAW,GAAG4E,IAAI,CAAC0P,cAAzB;;AAEA,UAAI,CAACvU,UAAD,IAAe,CAACC,WAApB,EAAiC;AAC/B,eAAOoU,GAAP;AACD;;AACD,aAAOA,GAAG,GAAGrU,UAAU,GAAGC,WAA1B;AACD,KARY,EAQV,CARU,CAAb;AAUA,WAAOc,IAAI,GAAG,CAAC,KAAK8N,sBAAL,KAAiCjQ,GAAG,IAAIgG,KAAK,CAAClC,MAAN,GAAe,CAAnB,CAArC,IAA8D3B,IAAjE,GAAwE,CAAnF;AACD,GAfO;;AAgBA,kBAAA,GAAR,UACE6D,KADF,EAEEjC,CAFF,EAGE6R,CAHF;AAKE,QAAMzT,IAAI,GAAG,KAAK0T,QAAL,CAAc7P,KAAK,CAACwD,KAAN,CAAYzF,CAAZ,EAAe6R,CAAf,CAAd,CAAb;;AACM,QAAArQ,KAAqB,KAAK/D,OAAL,CAAasU,SAAlC;AAAA,QAACC,OAAO,QAAR;AAAA,QAAUC,OAAO,QAAjB;;AAEN,QAAIC,QAAQ,CAACD,OAAD,CAAZ,EAAuB;AACrB;AACA,UAAI7T,IAAI,GAAG4T,OAAX,EAAoB;AAClB,eAAOnQ,IAAI,CAACsQ,GAAL,CAAS/T,IAAI,GAAG4T,OAAhB,EAAyB,CAAzB,IAA8BnQ,IAAI,CAACsQ,GAAL,CAASF,OAAT,EAAkB,CAAlB,CAArC;AACD,OAFD,MAEO,IAAI7T,IAAI,GAAG6T,OAAX,EAAoB;AACzB,eAAOpQ,IAAI,CAACsQ,GAAL,CAAS/T,IAAI,GAAG6T,OAAhB,EAAyB,CAAzB,IAA8BpQ,IAAI,CAACsQ,GAAL,CAASF,OAAT,EAAkB,CAAlB,CAArC;AACD;AACF,KAPD,MAOO,IAAI7T,IAAI,GAAG4T,OAAX,EAAoB;AACzB,aAAOnQ,IAAI,CAACC,GAAL,CAASD,IAAI,CAACsQ,GAAL,CAASH,OAAT,EAAkB,CAAlB,CAAT,EAA+BnQ,IAAI,CAACsQ,GAAL,CAAS/T,IAAT,EAAe,CAAf,CAA/B,IAAoDyD,IAAI,CAACsQ,GAAL,CAASF,OAAT,EAAkB,CAAlB,CAA3D;AACD;;;AAED,WAAO7T,IAAI,GAAG4T,OAAd;AACD,GApBO;;AAqBA,kBAAA,GAAR,UAAiB/P,KAAjB;AAAA,oBAAA;;AACE,QAAMqO,QAAQ,GAAGrO,KAAK,CAAClC,MAAvB;AACA,QAAM4P,iBAAiB,GAAG,KAAKlS,OAAL,CAAaoS,WAAvC;;AACM,QAAArO,KAAmCrC,QAAQ,CAACwQ,iBAAD,CAAR,GACrCA,iBADqC,GAErC,CAACA,iBAAD,EAAoBA,iBAApB,CAFE;AAAA,QAACQ,SAAS,QAAV;AAAA,QAAY/E,SAAS,QAArB;;AAIN,QAAMyB,KAAK,GAAG,UAACuF,OAAD;AACZ,UAAMC,OAAO,GAA8B,EAA3C;AACA,UAAMrC,WAAW,GAAG7E,QAAQ,CAACiH,OAAD,EAAU,EAAV,CAA5B;;AAEA,WAAK,IAAIrB,QAAQ,GAAGlP,IAAI,CAAC+G,GAAL,CAASoH,WAAW,GAAGG,SAAvB,EAAkCG,QAAlC,CAApB,EAAiES,QAAQ,IAAIT,QAA7E,EAAuF,EAAES,QAAzF,EAAmG;AACjG,YAAIA,QAAQ,GAAGf,WAAX,GAAyB5E,SAA7B,EAAwC;AACtC;AACD;;AACD,YAAIiC,IAAI,GAAGlL,KAAI,CAACwO,QAAL,CACT1O,KADS,EAET+N,WAFS,EAGTe,QAHS,CAAX;;AAMA,YAAI1D,IAAI,GAAG,CAAP,IAAY0D,QAAQ,KAAKT,QAA7B,EAAuC;AACrCjD,UAAAA,IAAI,GAAG,CAAP;AACD;;AACDgF,QAAAA,OAAO,CAAC,KAAGtB,QAAJ,CAAP,GAAyBlP,IAAI,CAACsQ,GAAL,CAAS9E,IAAT,EAAe,CAAf,CAAzB;AACD;;AACD,aAAOgF,OAAP;AACD,KApBD;;;AAsBA,WAAOhE,SAAS,CAACxB,KAAD,EAAQ,GAAR,EAAa,KAAGyD,QAAhB,CAAhB;AACD,GA9BO;;AA+BA,mBAAA,GAAR,UACErO,KADF,EAEEsN,IAFF,EAGErG,OAHF,EAIEyB,cAJF;AAGE,0BAAA,EAAA;AAAAzB,MAAAA,YAAA;;;AAIE,QAAAjN,GAAG,GACD,KAAKwB,OAAL,IADF;AAEF,QAAMsC,MAAM,GAAGwP,IAAI,CAACxP,MAApB;AACA,QAAM0J,UAAU,GAAGP,OAAO,CAAC,CAAD,CAAP,IAAc,CAAjC;AACA,QAAI9L,UAAU,GAAGqM,UAAjB;;AAEA,SAAK,IAAIzJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,GAAG,CAA7B,EAAgC,EAAEC,CAAlC,EAAqC;AACnC,UAAMsS,KAAK,GAAGnH,QAAQ,CAACoE,IAAI,CAACvP,CAAD,CAAL,EAAU,EAAV,CAAtB;AACA,UAAMuS,KAAK,GAAGpH,QAAQ,CAACoE,IAAI,CAACvP,CAAC,GAAG,CAAL,CAAL,EAAc,EAAd,CAAtB,CAFmC;;AAInC,UAAMwS,SAAS,GAAGvQ,KAAK,CAACwD,KAAN,CAAY6M,KAAZ,EAAmBC,KAAnB,CAAlB;AACA,UAAME,eAAe,GAAGD,SAAS,CAACzS,MAAlC;;AACA,UAAMzC,WAAW,GAAG,KAAKwU,QAAL,CAAcU,SAAd,CAApB;;AAEA,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,eAApB,EAAqC,EAAEZ,CAAvC,EAA0C;AACxC,YAAM3P,IAAI,GAAGsQ,SAAS,CAACX,CAAD,CAAtB;AACA,YAAMxU,UAAU,GAAG6E,IAAI,CAACyP,aAAL,GAAqBzP,IAAI,CAAC0P,cAA1B,GAA2CtU,WAA9D;AACA,YAAMoV,QAAQ,GAAGF,SAAS,CAACX,CAAC,GAAG,CAAL,CAA1B;AACA,YAAM1U,SAAS,GAAGuV,QAAQ,GACtBA,QAAQ,CAAC5G,YAAT,GAAwB4G,QAAQ,CAAC/G,aAAjC,GAAiD1P,GAD3B,GAEtB,CAFJ;AAKAiG,QAAAA,IAAI,CAACyQ,cAAL,CAAoB;AAClBxV,UAAAA,SAAS,WADS;AAElBC,UAAAA,UAAU,YAFQ;AAGlBC,UAAAA,UAAU,YAHQ;AAIlBC,UAAAA,WAAW;AAJO,SAApB;AAMD;;AACDF,MAAAA,UAAU,IAAInB,GAAG,GAAGqB,WAApB;AACD;;AAED,QAAIqN,cAAJ,EAAoB;AAClB;AACA,aAAO;AACLpG,QAAAA,KAAK,EAAE,CAACkF,UAAD,CADF;AAELjF,QAAAA,GAAG,EAAE,CAACpH,UAAD;AAFA,OAAP;AAID;AAED;;;AACA,QAAMU,MAAM,GAAGV,UAAU,GAAGqM,UAA5B;AAEAxH,IAAAA,KAAK,CAACb,OAAN,CAAc,UAACc,IAAD;AACZA,MAAAA,IAAI,CAAC4G,aAAL,IAAsBhL,MAAtB;AACD,KAFD;AAGA,WAAO;AACLyG,MAAAA,KAAK,EAAE,CAACkF,UAAU,GAAG3L,MAAd,CADF;AAEL0G,MAAAA,GAAG,EAAE,CAACiF,UAAD;AAFA,KAAP;AAID,GA1DO;;AApMMmJ,EAAAA,2BAAA,yBACTpN,IAAI,CAAChF;AACRqP,IAAAA,WAAW,EAAEnT,aAAa,CAACI;AAC3BwS,IAAAA,QAAQ,EAAE5S,aAAa,CAACI;AACxBiV,IAAAA,SAAS,EAAErV,aAAa,CAACI;IAJb;AAMA8V,EAAAA,4BAAA,yBACTpN,IAAI,CAACP;AACR4K,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AACbP,IAAAA,QAAQ,EAAE;AACVyC,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAIc,QAAJ;IAJC;AAPHD,EAAAA,aAAa,eADzBvS,eACYuS,cAAA;AAgQb,sBAAA;AAAC,EAhQkCpN,KAAnC;AAsQA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;ACpUA,SAASsN,WAAT,CAAqB5J,OAArB;AACE,MAAI6J,QAAQ,GAAG,CAACF,QAAhB;AAEA3J,EAAAA,OAAO,CAAC9H,OAAR,CAAgB,UAACyH,KAAD;AACd,QAAIqJ,QAAQ,CAACrJ,KAAD,CAAZ,EAAqB;AACnBkK,MAAAA,QAAQ,GAAGlR,IAAI,CAACC,GAAL,CAASiR,QAAT,EAAmBlK,KAAnB,CAAX;AACD;AACF,GAJD;AAKA,SAAOqJ,QAAQ,CAACa,QAAD,CAAR,GAAqBA,QAArB,GAAgC,CAAvC;AACD;;AACD,SAASC,WAAT,CAAqB9J,OAArB;AACE,MAAI+J,QAAQ,GAAGJ,QAAf;AAEA3J,EAAAA,OAAO,CAAC9H,OAAR,CAAgB,UAACyH,KAAD;AACd,QAAIqJ,QAAQ,CAACrJ,KAAD,CAAZ,EAAqB;AACnBoK,MAAAA,QAAQ,GAAGpR,IAAI,CAAC+G,GAAL,CAASqK,QAAT,EAAmBpK,KAAnB,CAAX;AACD;AACF,GAJD;AAKA,SAAOqJ,QAAQ,CAACe,QAAD,CAAR,GAAqBA,QAArB,GAAgC,CAAvC;AACD;;AACD,SAASC,eAAT,CAAyBzK,YAAzB,EAAiD0K,YAAjD,EAAyEC,YAAzE;AACE,SAAON,WAAW,CAACrK,YAAD,CAAX,GACH4K,cAAc,CAAC5K,YAAD,EAAe0K,YAAf,EAA6BC,YAA7B,CADlB;AAED;;AAED,SAASC,cAAT,CAAwB5K,YAAxB,EAAgDC,UAAhD,EAAsE0K,YAAtE;AACE,MAAMrT,MAAM,GAAG0I,YAAY,CAAC1I,MAA5B;;AAEA,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,CAAP;AACD;;AACD,MAAMuT,WAAW,GAAGN,WAAW,CAACtK,UAAD,CAA/B;AACA,MAAM6K,aAAa,GAAGT,WAAW,CAACrK,YAAD,CAAjC;AACA,MAAI+K,SAAS,GAAG,CAAhB;;AAEA,MAAI,CAACJ,YAAL,EAAmB;AACjB,WAAO,CAAP;AACD;;AAGD,OAAK,IAAIK,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAG1T,MAA1C,EAAkD,EAAE0T,YAApD,EAAkE;AAChE,QAAMhK,UAAU,GAAGhB,YAAY,CAACgL,YAAD,CAA/B;AACA,QAAMjK,QAAQ,GAAGd,UAAU,CAAC+K,YAAD,CAA3B;;AAEA,QAAI,CAACvB,QAAQ,CAACzI,UAAD,CAAT,IAAyB,CAACyI,QAAQ,CAAC1I,QAAD,CAAtC,EAAkD;AAChD;AACD;;AACD,QAAMkK,QAAQ,GAAGjK,UAAU,GAAG8J,aAA9B;AACA,QAAMI,MAAM,GAAGnK,QAAQ,GAAG8J,WAA1B,CARgE;;AAYhEE,IAAAA,SAAS,GAAGC,YAAY,GAAG5R,IAAI,CAACC,GAAL,CAAS0R,SAAT,EAAoBA,SAAS,GAAGE,QAAZ,GAAuBC,MAA3C,CAAH,GAAwDD,QAAQ,GAAGC,MAA3F;AACD;;AAED,SAAOH,SAAP;AACD;;AACD,SAASI,YAAT,CAAsBnL,YAAtB,EAA8CC,UAA9C,EAAoE1K,IAApE;AAOI,MAAAb,SAAS,GAIPa,IAAI,UAJN;AAAA,MACAX,UAAU,GAGRW,IAAI,WAJN;AAAA,MAEAZ,UAAU,GAERY,IAAI,WAJN;AAAA,MAGAV,WAAW,GACTU,IAAI,YAJN;;AAKF,OACE,IAAIyV,YAAY,GAAGtW,SADrB,EAEEsW,YAAY,GAAGtW,SAAS,GAAGE,UAF7B,EAGE,EAAEoW,YAHJ,EAIE;AACAhL,IAAAA,YAAY,CAACgL,YAAD,CAAZ,GAA6B5R,IAAI,CAAC+G,GAAL,CAASH,YAAY,CAACgL,YAAD,CAArB,EAAqCrW,UAArC,CAA7B;AACAsL,IAAAA,UAAU,CAAC+K,YAAD,CAAV,GAA2B5R,IAAI,CAACC,GAAL,CAAS4G,UAAU,CAAC+K,YAAD,CAAnB,EAAmCrW,UAAU,GAAGE,WAAhD,CAA3B;AACD;AACF;AAkBD;;;;;;;;;AAQA;;;AAA+B8G,EAAAA,4BAAA;;AAA/B,oBAAA;;AAgMC;;;;AAlLQ,mBAAA,GAAP,UAAiBnC,KAAjB,EAAoC+G,SAApC,EAAgEE,OAAhE;AACE,QAAM2K,KAAK,GAAG,KAAKC,SAAL,EAAd;;AAEE,QAAYC,eAAe,GAGzBF,KAAK,WAHP;AAAA,QACaG,gBAAgB,GAE3BH,KAAK,YAHP;AAAA,QAEOI,UAAU,GACfJ,KAAK,MAHP;AAII,QAAArS,KAGF,KAAK/D,OAHH;AAAA,QACJxB,GAAG,SADC;AAAA,QAEJmX,YAAY,kBAFR;;AAKA,QAAA5P,KAGF,KAAK0Q,WAAL,CAAiBH,eAAjB,CAHE;AAAA,QACQI,cAAc,gBADtB;AAAA,QAESC,eAAe,iBAFxB;;AAMN,QAAM5J,WAAW,GAAGvI,KAAK,CAAClC,MAA1B;;AAEA,QAAI,CAACyK,WAAD,IAAgB,CAACuJ,eAAjB,IAAoC,CAACC,gBAAzC,EAA2D;AACzD,aAAO;AAAEzP,QAAAA,KAAK,EAAE2E,OAAT;AAAkB1E,QAAAA,GAAG,EAAE0E;AAAvB,OAAP;AACD;;AACD,QAAMmL,WAAW,GAAGJ,UAAU,CAAClU,MAA/B;AACA,QAAI0I,YAAY,GAAGhH,KAAK,CAACsS,eAAD,CAAL,CAAuBlQ,GAAvB,CAA2B;AAAM,aAAAgP,QAAA;AAAQ,KAAzC,CAAnB;AACA,QAAInK,UAAU,GAAGjH,KAAK,CAACsS,eAAD,CAAL,CAAuBlQ,GAAvB,CAA2B;AAAM,aAAA,CAACgP,QAAD;AAAS,KAA1C,CAAjB;AACA,QAAMM,YAAY,GAAGU,KAAK,CAAC3K,OAAN,CAAcrF,GAAd,CAAkB,UAACgF,KAAD;AAAW,aAAAA,KAAK,IAAIuL,eAAe,GAAGnY,GAAtB,CAAL;AAA+B,KAA5D,CAArB;;AAEA,SAAK,IAAIqY,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAG9J,WAAtC,EAAmD8J,UAAU,IAAID,WAAjE,EAA8E;AAC5E;AACA,UAAM5K,UAAU,GAAGyJ,eAAe,CAACxK,UAAD,EAAayK,YAAb,EAA2BC,YAA3B,CAAlC;;AAEA,WAAK,IAAImB,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAGF,WAAZ,IAA2BC,UAAU,GAAGC,SAAb,GAAyB/J,WAA5E,EAAyF,EAAE+J,SAA3F,EAAsG;AACpG,YAAMrS,IAAI,GAAGD,KAAK,CAACqS,UAAU,GAAGC,SAAd,CAAlB;AACM,YAAAC,KAKFP,UAAU,CAACM,SAAD,CALR;AAAA,YACQE,mBAAmB,gBAD3B;AAAA,YAEOC,kBAAkB,eAFzB;AAAA,YAGSC,oBAAoB,iBAH7B;AAAA,YAIQC,mBAAmB,gBAJ3B;AAMN,YAAMxX,UAAU,GAAGqM,UAAU,GAAGgL,mBAAmB,IAAIL,eAAe,GAAGnY,GAAtB,CAAnD;AACA,YAAMkB,SAAS,GAAGuX,kBAAkB,IAAIP,cAAc,GAAGlY,GAArB,CAApC;AACA,YAAMqB,WAAW,GAAGqX,oBAAoB,IAAIP,eAAe,GAAGnY,GAAtB,CAApB,GAAiDA,GAArE;AACA,YAAMoB,UAAU,GAAGuX,mBAAmB,IAAIT,cAAc,GAAGlY,GAArB,CAAnB,GAA+CA,GAAlE;AAEA2X,QAAAA,YAAY,CAACnL,YAAD,EAAeC,UAAf,EAA2B;AACrCvL,UAAAA,SAAS,EAAEuX,kBAD0B;AAErCrX,UAAAA,UAAU,EAAEuX,mBAFyB;AAGrCxX,UAAAA,UAAU,EAAEA,UAHyB;AAIrCE,UAAAA,WAAW,EAAEA,WAAW,GAAGrB;AAJU,SAA3B,CAAZ;AAMAiG,QAAAA,IAAI,CAACyQ,cAAL,CAAoB;AAClBxV,UAAAA,SAAS,WADS;AAElBC,UAAAA,UAAU,YAFQ;AAGlBC,UAAAA,UAAU,YAHQ;AAIlBC,UAAAA,WAAW;AAJO,SAApB;AAMD;AACF;;AACD,QAAMuX,cAAc,GAAG7L,SAAS,KAAK,KAArC;AAEA,QAAI8L,WAAW,GAAG5L,OAAlB;;AAEA,QAAI4L,WAAW,CAAC/U,MAAZ,KAAuBgU,eAA3B,EAA4C;AAC1C,UAAMjJ,OAAK,GAAG+J,cAAc,GAAGhT,IAAI,CAACC,GAAL,MAAA,CAAAD,IAAA,EAAYiT,WAAZ,CAAH,GAA8BjT,IAAI,CAAC+G,GAAL,MAAA,CAAA/G,IAAA,EAAYiT,WAAZ,CAA1D;AAEAA,MAAAA,WAAW,GAAGrT,KAAK,CAACsS,eAAD,CAAL,CAAuBlQ,GAAvB,CAA2B;AAAM,eAAAiH,OAAA;AAAK,OAAtC,CAAd;AACD;;AACDrC,IAAAA,YAAY,GAAGA,YAAY,CAAC5E,GAAb,CAAiB,UAACgF,KAAD;AAAW,aAAAqJ,QAAQ,CAACrJ,KAAD,CAAR,GAAkBA,KAAlB,GAA0B,CAA1B;AAA2B,KAAvD,CAAf;AACAH,IAAAA,UAAU,GAAGA,UAAU,CAAC7E,GAAX,CAAe,UAACgF,KAAD;AAAW,aAAAqJ,QAAQ,CAACrJ,KAAD,CAAR,GAAkBA,KAAlB,GAA0B,CAA1B;AAA2B,KAArD,CAAb;AACA,QAAMkM,WAAW,GAAGF,cAAc,GAC9BxB,cAAc,CAAC5K,YAAD,EAAeqM,WAAf,EAA4B1B,YAA5B,CADgB,GAE9BC,cAAc,CAACyB,WAAD,EAAcpM,UAAd,EAA0B0K,YAA1B,CAFlB;AAIAnR,IAAAA,KAAK,CAACb,OAAN,CAAc,UAACc,IAAD;AACZA,MAAAA,IAAI,CAAC4G,aAAL,IAAsBiM,WAAtB;AACD,KAFD;AAIA,WAAO;AACLxQ,MAAAA,KAAK,EAAEkE,YAAY,CAAC5E,GAAb,CAAiB,UAACgF,KAAD;AAAW,eAAAA,KAAK,GAAGkM,WAAR;AAAmB,OAA/C,CADF;AAELvQ,MAAAA,GAAG,EAAEkE,UAAU,CAAC7E,GAAX,CAAe,UAACgF,KAAD;AAAW,eAAAA,KAAK,GAAGkM,WAAR;AAAmB,OAA7C;AAFA,KAAP;AAID,GAlFM;;AAmFG,qBAAA,GAAV,UAAsBhB,eAAtB;AACQ,QAAAvS,KAGF,KAAK/D,OAHH;AAAA,QACJxB,GAAG,SADC;AAAA,QAEM+Y,cAAc,cAFpB;;AAKN,QAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;AACtC,aAAOA,cAAP;AACD;;AACD,QAAMC,aAAa,GAAGD,cAAc,GAChCA,cADgC,GAEhC,CAAC,KAAK9I,sBAAL,KAAiCjQ,GAAlC,IAAyC8X,eAAzC,GAA2D9X,GAF/D;AAIA,WAAO;AAAEoB,MAAAA,UAAU,EAAE4X,aAAd;AAA6B3X,MAAAA,WAAW,EAAE2X;AAA1C,KAAP;AACD,GAdS;;AAeF,mBAAA,GAAR;AACE,QAAMpB,KAAK,GAAG,KAAKpW,OAAL,CAAaoW,KAA3B;AACA,QAAMG,gBAAgB,GAAGH,KAAK,CAAC9T,MAA/B;AACA,QAAMgU,eAAe,GAAGC,gBAAgB,GAAGH,KAAK,CAAC,CAAD,CAAL,CAAS9T,MAAZ,GAAqB,CAA7D;AACA,QAAMmV,KAAK,GAAgB,EAA3B;AACA,QAAMC,OAAO,GAA4B,EAAzC;AACA,QAAM1M,YAAY,GAAGhH,KAAK,CAACsS,eAAD,CAAL,CAAuBlQ,GAAvB,CAA2B;AAAM,aAAAgP,QAAA;AAAQ,KAAzC,CAArB;AACA,QAAMnK,UAAU,GAAGjH,KAAK,CAACsS,eAAD,CAAL,CAAuBlQ,GAAvB,CAA2B;AAAM,aAAA,CAACgP,QAAD;AAAS,KAA1C,CAAnB;;AAEA,SAAK,IAAIuC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGpB,gBAAtB,EAAwC,EAAEoB,EAA1C,EAA8C;AAC5C,WAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGtB,eAAtB,EAAuC,EAAEsB,EAAzC,EAA6C;AAC3C,YAAMC,IAAI,GAAGzB,KAAK,CAACuB,EAAD,CAAL,CAAUC,EAAV,CAAb;;AAEA,YAAI,CAACC,IAAL,EAAW;AACT;AACD;;AACD,YAAIH,OAAO,CAAIC,EAAE,MAAF,GAAMC,EAAV,CAAX,EAA4B;AAC1B;AACD;;AACD,YAAMrX,IAAI,GAAG,KAAKuX,SAAL,CAAeJ,OAAf,EAAwBG,IAAxB,EAA8BF,EAA9B,EAAkCC,EAAlC,EAAsCtB,eAAtC,EAAuDC,gBAAvD,CAAb;;AAEAJ,QAAAA,YAAY,CAACnL,YAAD,EAAeC,UAAf,EAA2B1K,IAA3B,CAAZ;AACAkX,QAAAA,KAAK,CAACvT,IAAN,CAAW3D,IAAX;AACD;AACF;;AACDkX,IAAAA,KAAK,CAAChE,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAU,aAACD,CAAC,CAACmE,IAAF,GAASlE,CAAC,CAACkE,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAxB;AAA0B,KAA/C;AAGA,WAAO;AACLJ,MAAAA,KAAK,OADA;AAEL7X,MAAAA,UAAU,EAAE0W,eAFP;AAGLzW,MAAAA,WAAW,EAAE0W,gBAHR;AAIL9K,MAAAA,OAAO,EAAET;AAJJ,KAAP;AAMD,GAlCO;;AAmCA,mBAAA,GAAR,UACE0M,OADF,EAEEG,IAFF,EAGEF,EAHF,EAIEC,EAJF,EAKEtB,eALF,EAMEC,gBANF;AAQE,QAAMH,KAAK,GAAG,KAAKpW,OAAL,CAAaoW,KAA3B;AAEA,QAAIvW,WAAW,GAAG,CAAlB;AACA,QAAID,UAAU,GAAG,CAAjB;;AAGA,SAAK,IAAImY,EAAE,GAAGH,EAAd,EAAkBG,EAAE,GAAGzB,eAAvB,EAAwC,EAAEyB,EAA1C,EAA8C;AAC5C,UAAI3B,KAAK,CAACuB,EAAD,CAAL,CAAUI,EAAV,MAAkBF,IAAtB,EAA4B;AAC1BjY,QAAAA,UAAU,GAAGmY,EAAE,GAAGH,EAAL,GAAU,CAAvB;AACA;AACD;;AACD;AACD;;AACD,SAAK,IAAII,EAAE,GAAGL,EAAd,EAAkBK,EAAE,GAAGzB,gBAAvB,EAAyC,EAAEyB,EAA3C,EAA+C;AAC7C,UAAI5B,KAAK,CAAC4B,EAAD,CAAL,CAAUJ,EAAV,MAAkBC,IAAtB,EAA4B;AAC1BhY,QAAAA,WAAW,GAAGmY,EAAE,GAAGL,EAAL,GAAU,CAAxB;AACA;AACD;;AACD;AACD;;;AAGD,SAAK,IAAIM,CAAC,GAAGN,EAAb,EAAiBM,CAAC,GAAGN,EAAE,GAAG9X,WAA1B,EAAuC,EAAEoY,CAAzC,EAA4C;AAC1C,WAAK,IAAItI,CAAC,GAAGiI,EAAb,EAAiBjI,CAAC,GAAGiI,EAAE,GAAGhY,UAA1B,EAAsC,EAAE+P,CAAxC,EAA2C;AACzC+H,QAAAA,OAAO,CAAIO,CAAC,MAAD,GAAKtI,CAAT,CAAP,GAAuB,IAAvB;AACD;AACF;;AAED,QAAMpP,IAAI,GAAc;AACtBsX,MAAAA,IAAI,MADkB;AAEtBnY,MAAAA,SAAS,EAAEkY,EAFW;AAGtBjY,MAAAA,UAAU,EAAEgY,EAHU;AAItB/X,MAAAA,UAAU,YAJY;AAKtBC,MAAAA,WAAW;AALW,KAAxB;AAOA,WAAOU,IAAP;AACD,GA5CO;;AAlJM2X,EAAAA,uBAAA,yBACTnQ,IAAI,CAAChF;AACRqT,IAAAA,KAAK,EAAEnX,aAAa,CAACI;AACrBsW,IAAAA,YAAY,EAAE1W,aAAa,CAACI;AAC5B8Y,IAAAA,QAAQ,EAAElZ,aAAa,CAACI;IAJZ;AAMA6Y,EAAAA,wBAAA,yBACTnQ,IAAI,CAACP;AACR4O,IAAAA,KAAK,EAAE;AACP+B,IAAAA,QAAQ,EAAE;AACVxC,IAAAA,YAAY,EAAE;IAJF;AAPHuC,EAAAA,SAAS,eADrBtV,eACYsV,UAAA;AAgMb,kBAAA;AAAC,EAhM8BnQ,KAA/B;AAsMA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;AC9UA;;;AAQE,mBAAA,CAAYvH,MAAZ;AACE,QAAM4X,SAAS;AACblE,MAAAA,aAAa,EAAE;AACfC,MAAAA,cAAc,EAAE;AAChBvU,MAAAA,UAAU,EAAE;AACZC,MAAAA,WAAW,EAAE;AACbH,MAAAA,SAAS,EAAE;AACXC,MAAAA,UAAU,EAAE;AACZ6E,MAAAA,KAAK,EAAE;OACJhE,OARL;;AAUA,SAAK,IAAMiC,IAAX,IAAmB2V,SAAnB,EAA8B;AAC5B,WAAK3V,IAAL,IAAa2V,SAAS,CAAC3V,IAAD,CAAtB;AACD;AACF;;;;AACM,iBAAA,GAAP,UAAe7C,UAAf,EAAmCC,WAAnC;AACE,QAAMwY,MAAM,GAAG,KAAKzY,UAAL,GAAkBA,UAAU,GAAG,KAAKA,UAApC,GAAiD,CAAhE;AACA,QAAM0Y,MAAM,GAAG,KAAKzY,WAAL,GAAmBA,WAAW,GAAG,KAAKA,WAAtC,GAAoD,CAAnE;AAEA,SAAK2E,KAAL,CAAWb,OAAX,CAAmB,UAACc,IAAD;AACjB,UAAI4T,MAAM,KAAK,CAAf,EAAkB;AAChB5T,QAAAA,IAAI,CAAC/E,SAAL,IAAkB2Y,MAAlB;AACA5T,QAAAA,IAAI,CAAC7E,UAAL,IAAmByY,MAAnB;AACD;;AACD,UAAIC,MAAM,KAAK,CAAf,EAAkB;AAChB7T,QAAAA,IAAI,CAAC9E,UAAL,IAAmB2Y,MAAnB;AACA7T,QAAAA,IAAI,CAAC5E,WAAL,IAAoByY,MAApB;AACD;AACF,KATD;AAWA,SAAK1Y,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD,GAjBM;;AAkBA,cAAA,GAAP,UAAY4E,IAAZ;AACE,SAAKD,KAAL,CAAWN,IAAX,CAAgBO,IAAhB;AACD,GAFM;;AAGA,0BAAA,GAAP;AACE,WAAO,KAAKyP,aAAL,GAAqB,KAAKC,cAAjC;AACD,GAFM;;AAGA,iBAAA,GAAP;AACE,WAAO,KAAKvU,UAAL,GAAkB,KAAKC,WAA9B;AACD,GAFM;;AAGA,qBAAA,GAAP;AACE,WAAQ,KAAKsU,cAAL,KAAwB,CAAzB,GAA8B,CAA9B,GAAkC,KAAKD,aAAL,GAAqB,KAAKC,cAAnE;AACD,GAFM;;AAGA,kBAAA,GAAP;AACE,WAAQ,KAAKtU,WAAL,KAAqB,CAAtB,GAA2B,CAA3B,GAA+B,KAAKD,UAAL,GAAkB,KAAKC,WAA7D;AACD,GAFM;;AAGT,iBAAA;AAAC,GAxDD;;ACFA,SAAS0Y,OAAT,CAAiBC,YAAjB,EAAuClW,MAAvC;AACE,MAAIsN,IAAI,GAAG4I,YAAY,GAAGlW,MAA1B;;AAEA,MAAIsN,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,GAAG,IAAIA,IAAX;AACD;;AAED,SAAOA,IAAI,GAAG,CAAd;AACD;;AACD,SAAS6I,OAAT,CACEhU,IADF,EAEEiU,WAFF,EAGEC,WAHF,EAIEC,gBAJF,EAKEC,kBALF;AAOEpU,EAAAA,IAAI,CAAC5E,WAAL,GAAmB8Y,WAAW,CAAC9Y,WAA/B;AACA4E,EAAAA,IAAI,CAAC7E,UAAL,GAAkB+Y,WAAW,CAAC/Y,UAA9B;AACA8Y,EAAAA,WAAW,CAAC7Y,WAAZ,GAA0B+Y,gBAAgB,CAAC/Y,WAA3C;AACA6Y,EAAAA,WAAW,CAAC9Y,UAAZ,GAAyBgZ,gBAAgB,CAAChZ,UAA1C;;AAEA,MAAIiZ,kBAAJ,EAAwB;AACtBpU,IAAAA,IAAI,CAAC9E,UAAL,GAAkB+Y,WAAW,CAAC/Y,UAAZ,GAAyB+Y,WAAW,CAAC7Y,WAAvD;AACA4E,IAAAA,IAAI,CAAC/E,SAAL,GAAiBgZ,WAAW,CAAChZ,SAA7B;AACD,GAHD,MAGO;AACL+E,IAAAA,IAAI,CAAC/E,SAAL,GAAiBgZ,WAAW,CAAChZ,SAAZ,GAAwBgZ,WAAW,CAAC9Y,UAArD;AACA6E,IAAAA,IAAI,CAAC9E,UAAL,GAAkB+Y,WAAW,CAAC/Y,UAA9B;AACD;AACF;AAkBD;;;;;;;;;;AASA;;;AAAiCgH,EAAAA,8BAAA;;AAAjC,sBAAA;;AAiIC;;;;AAlHQ,mBAAA,GAAP,UAAiBnC,KAAjB,EAAoC+G,SAApC,EAAgEE,OAAhE;AAAA,oBAAA;;AACQ,QAAA1H,KAAuB,KAAK/D,OAA5B;AAAA,QAAE8Y,WAAW,iBAAb;AAAA,QAAeta,GAAG,SAAlB;AACN,QAAMua,mBAAmB,GAAG,KAAKtK,sBAAL,EAA5B;AACA,QAAMuK,oBAAoB,GAAGD,mBAAmB,GAAGD,WAAnD;AACA,QAAMtN,WAAW,GAAGC,OAAO,CAACnJ,MAAR,GAAiBmJ,OAAjB,GAA2B,CAAC,CAAD,CAA/C;AACA,QAAMO,UAAU,GAAGT,SAAS,KAAK,KAAd,GACfnH,IAAI,CAACC,GAAL,MAAA,CAAAD,IAAA,EAAYoH,WAAZ,CADe,GAEfpH,IAAI,CAAC+G,GAAL,MAAA,CAAA/G,IAAA,EAAYoH,WAAZ,IAA2BwN,oBAA3B,GAAkDxa,GAFtD;AAGA,QAAMuN,QAAQ,GAAGC,UAAU,GAAGgN,oBAAb,GAAoCxa,GAArD;AACA,QAAMuB,SAAS,GAAG,IAAIkZ,QAAJ,CAAa,EAAb,CAAlB;AAEAzU,IAAAA,KAAK,CAACb,OAAN,CAAc,UAACc,IAAD;AACZ,UAAMyU,KAAK,GAAG,IAAID,QAAJ,CAAa;AACzBrZ,QAAAA,UAAU,EAAE6E,IAAI,CAACyP,aADQ;AAEzBrU,QAAAA,WAAW,EAAE4E,IAAI,CAAC0P,cAFO;AAGzBD,QAAAA,aAAa,EAAEzP,IAAI,CAACyP,aAHK;AAIzBC,QAAAA,cAAc,EAAE1P,IAAI,CAAC0P;AAJI,OAAb,CAAd;;AAOAzP,MAAAA,KAAI,CAACyU,gBAAL,CAAsBpZ,SAAtB,EAAiCmZ,KAAjC;;AACAnZ,MAAAA,SAAS,CAACmE,IAAV,CAAegV,KAAf;AACAnZ,MAAAA,SAAS,CAACqZ,OAAV,CAAkBL,mBAAmB,GAAGva,GAAxC,EAA6Cwa,oBAAoB,GAAGxa,GAApE;AACD,KAXD;AAYAgG,IAAAA,KAAK,CAACb,OAAN,CAAc,UAACc,IAAD,EAAOlC,CAAP;AACZ,UAAM8W,OAAO,GAAGtZ,SAAS,CAACyE,KAAV,CAAgBjC,CAAhB,CAAhB;AACA,UAAM3C,UAAU,GAAGyZ,OAAO,CAACzZ,UAAR,GAAqBpB,GAAxC;AACA,UAAMqB,WAAW,GAAGwZ,OAAO,CAACxZ,WAAR,GAAsBrB,GAA1C;AACA,UAAMmB,UAAU,GAAGqM,UAAU,GAAGqN,OAAO,CAAC1Z,UAAxC;AACA,UAAMD,SAAS,GAAG2Z,OAAO,CAAC3Z,SAA1B;AAEA+E,MAAAA,IAAI,CAACyQ,cAAL,CAAoB;AAClBxV,QAAAA,SAAS,WADS;AAElBC,QAAAA,UAAU,YAFQ;AAGlBC,QAAAA,UAAU,YAHQ;AAIlBC,QAAAA,WAAW;AAJO,OAApB;AAMD,KAbD;AAeA,WAAO;AACLiH,MAAAA,KAAK,EAAE,CAACkF,UAAD,CADF;AAELjF,MAAAA,GAAG,EAAE,CAACgF,QAAD;AAFA,KAAP;AAID,GA1CM;;AA2CC,0BAAA,GAAR,UAAyBhM,SAAzB,EAA8C0E,IAA9C;AACE,QAAI1E,SAAS,CAACuZ,QAAV,OAAyB,CAA7B,EAAgC;AAAE;AAChCvZ,MAAAA,SAAS,CAACmU,aAAV,GAA0BzP,IAAI,CAAC7E,UAA/B;AACAG,MAAAA,SAAS,CAACoU,cAAV,GAA2B1P,IAAI,CAAC5E,WAAhC;AACAE,MAAAA,SAAS,CAACH,UAAV,GAAuB6E,IAAI,CAAC7E,UAA5B;AACAG,MAAAA,SAAS,CAACF,WAAV,GAAwB4E,IAAI,CAAC5E,WAA7B;AACA;AACD;;AAED,QAAI6Y,WAAJ;AACA,QAAIa,OAAO,GAAGnE,QAAd;AACA,QAAIyD,kBAAkB,GAAG,KAAzB;AACA,QAAMF,WAAW,GAAG;AAClB/Y,MAAAA,UAAU,EAAE,CADM;AAElBC,MAAAA,WAAW,EAAE;AAFK,KAApB;AAIA,QAAM+Y,gBAAgB,GAAG;AACvBhZ,MAAAA,UAAU,EAAE,CADW;AAEvBC,MAAAA,WAAW,EAAE;AAFU,KAAzB;AAIM,QAAAkE,KAA8B,KAAK/D,OAAnC;AAAA,QAAEwZ,UAAU,gBAAZ;AAAA,QAAcC,WAAW,iBAAzB;AAEN1Z,IAAAA,SAAS,CAACyE,KAAV,CAAgBb,OAAhB,CAAwB,UAAC+V,KAAD;AACtB,UAAMC,iBAAiB,GAAGpB,OAAO,CAACmB,KAAK,CAACE,gBAAN,EAAD,EAA2BF,KAAK,CAACG,OAAN,EAA3B,CAAP,GAAqDL,UAA/E;AACA,UAAMM,kBAAkB,GAAGvB,OAAO,CAACmB,KAAK,CAACK,WAAN,EAAD,EAAsBL,KAAK,CAACJ,QAAN,EAAtB,CAAP,GAAiDG,WAA5E;AACA,UAAM7Z,UAAU,GAAG8Z,KAAK,CAAC9Z,UAAzB;AACA,UAAMC,WAAW,GAAG6Z,KAAK,CAAC7Z,WAA1B;;AACA,WAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1B,YAAIyX,cAAc,SAAlB;AACA,YAAIC,eAAe,SAAnB;AACA,YAAIlB,mBAAmB,SAAvB;AACA,YAAIC,oBAAoB,SAAxB;;AAEA,YAAIzW,CAAC,KAAK,CAAV,EAAa;AACX;AACAyX,UAAAA,cAAc,GAAGpa,UAAjB;AACAqa,UAAAA,eAAe,GAAGpa,WAAW,IAAI4E,IAAI,CAAC5E,WAAL,IAAoB6Z,KAAK,CAACvF,cAAN,GAAuB1P,IAAI,CAAC5E,WAAhD,CAAJ,CAA7B;AACAkZ,UAAAA,mBAAmB,GAAGnZ,UAAtB;AACAoZ,UAAAA,oBAAoB,GAAGnZ,WAAW,GAAGoa,eAArC;AACD,SAND,MAMO;AACL;AACAA,UAAAA,eAAe,GAAGpa,WAAlB;AACAma,UAAAA,cAAc,GAAGpa,UAAU,IAAI6E,IAAI,CAAC7E,UAAL,IAAmB8Z,KAAK,CAACxF,aAAN,GAAsBzP,IAAI,CAAC7E,UAA9C,CAAJ,CAA3B;AACAoZ,UAAAA,oBAAoB,GAAGnZ,WAAvB;AACAkZ,UAAAA,mBAAmB,GAAGnZ,UAAU,GAAGoa,cAAnC;AACD;;AAED,YAAME,QAAQ,GAAGF,cAAc,GAAGC,eAAlC;AACA,YAAME,SAAS,GAAGH,cAAc,GAAGC,eAAnC;AACA,YAAMrL,aAAa,GAAGmK,mBAAmB,GAAGC,oBAA5C;AACA,YAAMoB,cAAc,GAAGpB,oBAAoB,GAAGA,oBAA9C;AAEA,YAAIpJ,IAAI,GAAG2I,OAAO,CAAC9T,IAAI,CAACoV,OAAL,EAAD,EAAiBK,QAAjB,CAAP,GAAoCV,UAA/C;AACA5J,QAAAA,IAAI,IAAI2I,OAAO,CAAC9T,IAAI,CAAC6U,QAAL,EAAD,EAAkBa,SAAlB,CAAP,GAAsCV,WAA9C;AACA7J,QAAAA,IAAI,IAAI2I,OAAO,CAACmB,KAAK,CAACE,gBAAN,EAAD,EAA2BhL,aAA3B,CAAP,GAAmD4K,UAAnD,GAAgEG,iBAAxE;AACA/J,QAAAA,IAAI,IAAI2I,OAAO,CAACmB,KAAK,CAACK,WAAN,EAAD,EAAsBK,cAAtB,CAAP,GAA+CX,WAA/C,GAA6DK,kBAArE;;AAEA,YAAIlK,IAAI,KAAKxL,IAAI,CAAC+G,GAAL,CAASyE,IAAT,EAAe2J,OAAf,CAAb,EAAsC;AACpCA,UAAAA,OAAO,GAAG3J,IAAV;AACA8I,UAAAA,WAAW,GAAGgB,KAAd;AACAb,UAAAA,kBAAkB,GAAItW,CAAC,KAAK,CAA5B;AACAoW,UAAAA,WAAW,CAAC/Y,UAAZ,GAAyBoa,cAAzB;AACArB,UAAAA,WAAW,CAAC9Y,WAAZ,GAA0Boa,eAA1B;AACArB,UAAAA,gBAAgB,CAAChZ,UAAjB,GAA8BmZ,mBAA9B;AACAH,UAAAA,gBAAgB,CAAC/Y,WAAjB,GAA+BmZ,oBAA/B;AACD;AACF;AACF,KA7CD;AA+CAP,IAAAA,OAAO,CAAChU,IAAD,EAAOiU,WAAP,EAAoBC,WAApB,EAAiCC,gBAAjC,EAAmDC,kBAAnD,CAAP;AACD,GAtEO;;AAzDMwB,EAAAA,yBAAA,yBACTtS,IAAI,CAAChF;AACR+V,IAAAA,WAAW,EAAE7Z,aAAa,CAACI;AAC3Bma,IAAAA,UAAU,EAAEva,aAAa,CAACI;AAC1Boa,IAAAA,WAAW,EAAExa,aAAa,CAACI;IAJf;AAMAgb,EAAAA,0BAAA,yBACTtS,IAAI,CAACP;AACRsR,IAAAA,WAAW,EAAE;AACbU,IAAAA,UAAU,EAAE;AACZC,IAAAA,WAAW,EAAE;IAJD;AAPHY,EAAAA,WAAW,eADvBzX,eACYyX,YAAA;AAiIb,oBAAA;AAAC,EAjIgCtS,KAAjC;AAuIA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;"}